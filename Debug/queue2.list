
queue2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ffc  08009ffc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a004  0800a004  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000864  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f8e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d6f  00000000  00000000  0003804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  0003bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  0003cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f7d  00000000  00000000  0003e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e62  00000000  00000000  00062fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccadb  00000000  00000000  0007ae47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147922  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005290  00000000  00000000  00147974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ec0 	.word	0x08009ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009ec0 	.word	0x08009ec0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f004 f967 	bl	8004858 <HAL_UART_Transmit>
  return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001b8 	.word	0x200001b8

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fde1 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f883 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f97b 	bl	80008a0 <MX_GPIO_Init>
  MX_I2S3_Init();
 80005aa:	f000 f8e9 	bl	8000780 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ae:	f000 f917 	bl	80007e0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005b2:	f008 f94f 	bl	8008854 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80005b6:	f000 f949 	bl	800084c <MX_USART3_UART_Init>


//  char msg_buf[30] = {0};
//  strcat(msg_buf, "Hello \n\r");
//  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
  HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fe44 	bl	8001248 <HAL_Delay>

  InitQueue(&rx_Int_queue);
 80005c0:	4830      	ldr	r0, [pc, #192]	; (8000684 <main+0xec>)
 80005c2:	f000 faa6 	bl	8000b12 <InitQueue>
  // __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	492f      	ldr	r1, [pc, #188]	; (8000688 <main+0xf0>)
 80005ca:	4830      	ldr	r0, [pc, #192]	; (800068c <main+0xf4>)
 80005cc:	f004 f9d6 	bl	800497c <HAL_UART_Receive_IT>

  tm_ms_tick = HAL_GetTick();
 80005d0:	f000 fe2e 	bl	8001230 <HAL_GetTick>
 80005d4:	60f8      	str	r0, [r7, #12]
  sw = sw_old = HAL_GPIO_ReadPin(GPIOA, user_button_Pin);
 80005d6:	2101      	movs	r1, #1
 80005d8:	482d      	ldr	r0, [pc, #180]	; (8000690 <main+0xf8>)
 80005da:	f001 f999 	bl	8001910 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if ((HAL_GetTick() - tm_ms_tick) > 500)
 80005e6:	f000 fe23 	bl	8001230 <HAL_GetTick>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005f4:	d942      	bls.n	800067c <main+0xe4>
	  {
		  tm_ms_tick = HAL_GetTick();
 80005f6:	f000 fe1b 	bl	8001230 <HAL_GetTick>
 80005fa:	60f8      	str	r0, [r7, #12]
		  HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4824      	ldr	r0, [pc, #144]	; (8000694 <main+0xfc>)
 8000602:	f001 f9b6 	bl	8001972 <HAL_GPIO_TogglePin>

		  sw_old = sw;
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	71fb      	strb	r3, [r7, #7]
		  sw = HAL_GPIO_ReadPin(GPIOA, user_button_Pin);
 800060a:	2101      	movs	r1, #1
 800060c:	4820      	ldr	r0, [pc, #128]	; (8000690 <main+0xf8>)
 800060e:	f001 f97f 	bl	8001910 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	72fb      	strb	r3, [r7, #11]

		  if (sw != sw_old)
 8000616:	7afa      	ldrb	r2, [r7, #11]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	429a      	cmp	r2, r3
 800061c:	d02e      	beq.n	800067c <main+0xe4>
		  {
			  if (sw)
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d02b      	beq.n	800067c <main+0xe4>
			  {
				  printf("User button Pressed\n\r");
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0x100>)
 8000626:	f008 fd3f 	bl	80090a8 <iprintf>
				  printf("UART3 Queue IsEmpty() = %d\r\n",IsEmpty(&rx_Int_queue));
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <main+0xec>)
 800062c:	f000 faa8 	bl	8000b80 <IsEmpty>
 8000630:	4603      	mov	r3, r0
 8000632:	4619      	mov	r1, r3
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <main+0x104>)
 8000636:	f008 fd37 	bl	80090a8 <iprintf>
				  cnt_rcv = len_queue(&rx_Int_queue);
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <main+0xec>)
 800063c:	f000 fb14 	bl	8000c68 <len_queue>
 8000640:	4603      	mov	r3, r0
 8000642:	80bb      	strh	r3, [r7, #4]
				  printf("UART3 recieved data num = %d\r\n",cnt_rcv);
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	4619      	mov	r1, r3
 8000648:	4815      	ldr	r0, [pc, #84]	; (80006a0 <main+0x108>)
 800064a:	f008 fd2d 	bl	80090a8 <iprintf>
				  printf("Recieved data = ");
 800064e:	4815      	ldr	r0, [pc, #84]	; (80006a4 <main+0x10c>)
 8000650:	f008 fd2a 	bl	80090a8 <iprintf>

				  for(i=0; i<cnt_rcv; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	813b      	strh	r3, [r7, #8]
 8000658:	e009      	b.n	800066e <main+0xd6>
				  {
					  printf("%c",Dequeue(&rx_Int_queue));
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0xec>)
 800065c:	f000 fad6 	bl	8000c0c <Dequeue>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f008 fd38 	bl	80090d8 <putchar>
				  for(i=0; i<cnt_rcv; i++)
 8000668:	893b      	ldrh	r3, [r7, #8]
 800066a:	3301      	adds	r3, #1
 800066c:	813b      	strh	r3, [r7, #8]
 800066e:	893a      	ldrh	r2, [r7, #8]
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3f1      	bcc.n	800065a <main+0xc2>
				  }
				  printf("\n\r");
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0x110>)
 8000678:	f008 fd16 	bl	80090a8 <iprintf>
	  	}



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800067c:	f008 f910 	bl	80088a0 <MX_USB_HOST_Process>
	  if ((HAL_GetTick() - tm_ms_tick) > 500)
 8000680:	e7b1      	b.n	80005e6 <main+0x4e>
 8000682:	bf00      	nop
 8000684:	200000ac 	.word	0x200000ac
 8000688:	20000114 	.word	0x20000114
 800068c:	200001b8 	.word	0x200001b8
 8000690:	40020000 	.word	0x40020000
 8000694:	40020c00 	.word	0x40020c00
 8000698:	08009ed8 	.word	0x08009ed8
 800069c:	08009ef0 	.word	0x08009ef0
 80006a0:	08009f10 	.word	0x08009f10
 80006a4:	08009f30 	.word	0x08009f30
 80006a8:	08009f44 	.word	0x08009f44

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fc0c 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072a:	2307      	movs	r3, #7
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f9e2 	bl	8003afc <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800073e:	f000 f9e3 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fc43 	bl	8003fec <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800076c:	f000 f9cc 	bl	8000b08 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <MX_I2S3_Init+0x58>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2S3_Init+0x54>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <MX_I2S3_Init+0x5c>)
 80007aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2S3_Init+0x54>)
 80007c0:	f002 fcfc 	bl	80031bc <HAL_I2S_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ca:	f000 f99d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000118 	.word	0x20000118
 80007d8:	40003c00 	.word	0x40003c00
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f003 ff3b 	bl	80046ac <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f964 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000160 	.word	0x20000160
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART3_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART3_UART_Init+0x4c>)
 8000884:	f003 ff9b 	bl	80047be <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f93b 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001b8 	.word	0x200001b8
 800089c:	40004800 	.word	0x40004800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b73      	ldr	r3, [pc, #460]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a72      	ldr	r2, [pc, #456]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b70      	ldr	r3, [pc, #448]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b6c      	ldr	r3, [pc, #432]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a6b      	ldr	r2, [pc, #428]	; (8000aa4 <MX_GPIO_Init+0x204>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b69      	ldr	r3, [pc, #420]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b65      	ldr	r3, [pc, #404]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a64      	ldr	r2, [pc, #400]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b62      	ldr	r3, [pc, #392]	; (8000aa4 <MX_GPIO_Init+0x204>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <MX_GPIO_Init+0x204>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a5d      	ldr	r2, [pc, #372]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b57      	ldr	r3, [pc, #348]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a56      	ldr	r2, [pc, #344]	; (8000aa4 <MX_GPIO_Init+0x204>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b54      	ldr	r3, [pc, #336]	; (8000aa4 <MX_GPIO_Init+0x204>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4851      	ldr	r0, [pc, #324]	; (8000aa8 <MX_GPIO_Init+0x208>)
 8000964:	f000 ffec 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	484f      	ldr	r0, [pc, #316]	; (8000aac <MX_GPIO_Init+0x20c>)
 800096e:	f000 ffe7 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000978:	484d      	ldr	r0, [pc, #308]	; (8000ab0 <MX_GPIO_Init+0x210>)
 800097a:	f000 ffe1 	bl	8001940 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800097e:	2308      	movs	r3, #8
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <MX_GPIO_Init+0x208>)
 8000996:	f000 fe1f 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483e      	ldr	r0, [pc, #248]	; (8000aac <MX_GPIO_Init+0x20c>)
 80009b2:	f000 fe11 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c6:	2305      	movs	r3, #5
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4836      	ldr	r0, [pc, #216]	; (8000aac <MX_GPIO_Init+0x20c>)
 80009d2:	f000 fe01 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4832      	ldr	r0, [pc, #200]	; (8000ab4 <MX_GPIO_Init+0x214>)
 80009ec:	f000 fdf4 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f0:	2304      	movs	r3, #4
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0x218>)
 8000a04:	f000 fde8 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0x218>)
 8000a26:	f000 fdd7 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a2e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <MX_GPIO_Init+0x210>)
 8000a44:	f000 fdc8 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0x210>)
 8000a5c:	f000 fdbc 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a66:	2312      	movs	r3, #18
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a72:	2304      	movs	r3, #4
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <MX_GPIO_Init+0x218>)
 8000a7e:	f000 fdab 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_GPIO_Init+0x208>)
 8000a98:	f000 fd9e 	bl	80015d8 <HAL_GPIO_Init>

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_UART_RxCpltCallback+0x3c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10f      	bne.n	8000aee <HAL_UART_RxCpltCallback+0x32>
	{
		uint8_t r_dat = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
		r_dat = (uint8_t)huart3.Instance->DR;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_UART_RxCpltCallback+0x40>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
		Enqueue(&rx_Int_queue, r_dat);
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	4619      	mov	r1, r3
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <HAL_UART_RxCpltCallback+0x44>)
 8000ae0:	f000 f864 	bl	8000bac <Enqueue>

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4907      	ldr	r1, [pc, #28]	; (8000b04 <HAL_UART_RxCpltCallback+0x48>)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <HAL_UART_RxCpltCallback+0x40>)
 8000aea:	f003 ff47 	bl	800497c <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
	}
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004800 	.word	0x40004800
 8000afc:	200001b8 	.word	0x200001b8
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	20000114 	.word	0x20000114

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>

08000b12 <InitQueue>:
#include "queue.h"


// -------------------------------------------------------------------------------------
void InitQueue(Queue *queue)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	queue->front = queue->rear = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <IsFull>:
// -------------------------------------------------------------------------------------
int IsFull(Queue *queue)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	return NEXT(queue->rear) == queue->front;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <IsFull+0x40>)
 8000b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b52:	1159      	asrs	r1, r3, #5
 8000b54:	17d3      	asrs	r3, r2, #31
 8000b56:	1acb      	subs	r3, r1, r3
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	fb01 f303 	mul.w	r3, r1, r3
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8000b66:	4293      	cmp	r3, r2
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	51eb851f 	.word	0x51eb851f

08000b80 <IsEmpty>:
// -------------------------------------------------------------------------------------
int IsEmpty(Queue *queue)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	return queue->front == queue -> rear;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000b94:	429a      	cmp	r2, r3
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <Enqueue>:
// -------------------------------------------------------------------------------------
void Enqueue(Queue *queue, uint8_t data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
	uint8_t dummy;

	if(IsFull(queue))
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffbf 	bl	8000b3c <IsFull>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <Enqueue+0x22>
	{
		dummy = Dequeue(queue);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f821 	bl	8000c0c <Dequeue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
	}
	queue->buf[queue->rear] = data;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	545a      	strb	r2, [r3, r1]
	queue->rear = NEXT(queue->rear);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <Enqueue+0x5c>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1151      	asrs	r1, r2, #5
 8000bec:	17da      	asrs	r2, r3, #31
 8000bee:	1a8a      	subs	r2, r1, r2
 8000bf0:	2164      	movs	r1, #100	; 0x64
 8000bf2:	fb01 f202 	mul.w	r2, r1, r2
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	51eb851f 	.word	0x51eb851f

08000c0c <Dequeue>:
// -------------------------------------------------------------------------------------
uint8_t Dequeue(Queue *queue)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t re = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
	if(IsEmpty(queue))
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ffb1 	bl	8000b80 <IsEmpty>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <Dequeue+0x1c>
	{
		return re;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	e019      	b.n	8000c5c <Dequeue+0x50>
	}
	re = queue->buf[queue->front];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000c2e:	461a      	mov	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	5c9b      	ldrb	r3, [r3, r2]
 8000c34:	73fb      	strb	r3, [r7, #15]
	queue->front = NEXT(queue->front);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <Dequeue+0x58>)
 8000c40:	fb82 1203 	smull	r1, r2, r2, r3
 8000c44:	1151      	asrs	r1, r2, #5
 8000c46:	17da      	asrs	r2, r3, #31
 8000c48:	1a8a      	subs	r2, r1, r2
 8000c4a:	2164      	movs	r1, #100	; 0x64
 8000c4c:	fb01 f202 	mul.w	r2, r1, r2
 8000c50:	1a9a      	subs	r2, r3, r2
 8000c52:	b292      	uxth	r2, r2
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	return re;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	51eb851f 	.word	0x51eb851f

08000c68 <len_queue>:
// -------------------------------------------------------------------------------------
uint16_t len_queue(Queue *queue)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	return ((QUEUE_SIZE - queue->front + queue->rear)%QUEUE_SIZE);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000c76:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8000c80:	4413      	add	r3, r2
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <len_queue+0x3c>)
 8000c84:	fb82 1203 	smull	r1, r2, r2, r3
 8000c88:	1151      	asrs	r1, r2, #5
 8000c8a:	17da      	asrs	r2, r3, #31
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	2164      	movs	r1, #100	; 0x64
 8000c90:	fb01 f202 	mul.w	r2, r1, r2
 8000c94:	1a9a      	subs	r2, r3, r2
 8000c96:	b293      	uxth	r3, r2
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	51eb851f 	.word	0x51eb851f

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f000 fba2 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <HAL_I2S_MspInit+0xf0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d15a      	bne.n	8000dde <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d2c:	23c0      	movs	r3, #192	; 0xc0
 8000d2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fb77 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d44:	f7ff fee0 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_I2S_MspInit+0xf4>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dac:	2306      	movs	r3, #6
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <HAL_I2S_MspInit+0xf8>)
 8000db8:	f000 fc0e 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_I2S_MspInit+0xfc>)
 8000dda:	f000 fbfd 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40003c00 	.word	0x40003c00
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020800 	.word	0x40020800

08000df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_SPI_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12b      	bne.n	8000e72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e52:	23e0      	movs	r3, #224	; 0xe0
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e62:	2305      	movs	r3, #5
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_SPI_MspInit+0x8c>)
 8000e6e:	f000 fbb3 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d134      	bne.n	8000f14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_UART_MspInit+0x9c>)
 8000f00:	f000 fb6a 	bl	80015d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2027      	movs	r0, #39	; 0x27
 8000f0a:	f000 fa9c 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f0e:	2027      	movs	r0, #39	; 0x27
 8000f10:	f000 fab5 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40004800 	.word	0x40004800
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020c00 	.word	0x40020c00

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f948 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
//		Enqueue(&rx_Int_queue, r_dat);
//	}
//	__HAL_UART_CLEAR_PEFLAG(&huart3);
//	return;
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART3_IRQHandler+0x10>)
 8000f82:	f003 fd2b 	bl	80049dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001b8 	.word	0x200001b8

08000f90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <OTG_FS_IRQHandler+0x10>)
 8000f96:	f000 ff71 	bl	8001e7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200005e0 	.word	0x200005e0

08000fa4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
	}

return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fabb 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
	}
	return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103e:	605a      	str	r2, [r3, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f007 fed8 	bl	8008e64 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	200008f8 	.word	0x200008f8

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f007 fe97 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fa29 	bl	8000598 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001154:	0800a00c 	.word	0x0800a00c
  ldr r2, =_sbss
 8001158:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800115c:	200008f4 	.word	0x200008f4

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f94f 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd86 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f967 	bl	800149a <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e4:	f000 f92f 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	20000200 	.word	0x20000200

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000200 	.word	0x20000200

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff feb6 	bl	8001230 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e052      	b.n	800158a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0216 	bic.w	r2, r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001502:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <HAL_DMA_Abort+0x62>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0208 	bic.w	r2, r2, #8
 8001522:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	e013      	b.n	800155e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001536:	f7ff fe7b 	bl	8001230 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b05      	cmp	r3, #5
 8001542:	d90c      	bls.n	800155e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e015      	b.n	800158a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e4      	bne.n	8001536 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	223f      	movs	r2, #63	; 0x3f
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d004      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00c      	b.n	80015ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2205      	movs	r2, #5
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e16b      	b.n	80018cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 815a 	bne.w	80018c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d005      	beq.n	800162a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	2b02      	cmp	r3, #2
 8001628:	d130      	bne.n	800168c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80b4 	beq.w	80018c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a5f      	ldr	r2, [pc, #380]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a5b      	ldr	r2, [pc, #364]	; (80018e8 <HAL_GPIO_Init+0x310>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x226>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x222>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x21e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_GPIO_Init+0x324>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_GPIO_Init+0x328>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x32c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <HAL_GPIO_Init+0x330>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x310>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_GPIO_Init+0x334>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a32      	ldr	r2, [pc, #200]	; (800190c <HAL_GPIO_Init+0x334>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_GPIO_Init+0x334>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a27      	ldr	r2, [pc, #156]	; (800190c <HAL_GPIO_Init+0x334>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_GPIO_Init+0x334>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_GPIO_Init+0x334>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_GPIO_Init+0x334>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_GPIO_Init+0x334>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae90 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021800 	.word	0x40021800
 8001908:	40021c00 	.word	0x40021c00
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4013      	ands	r3, r2
 800198a:	041a      	lsls	r2, r3, #16
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43d9      	mvns	r1, r3
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	400b      	ands	r3, r1
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a8:	b08f      	sub	sp, #60	; 0x3c
 80019aa:	af0a      	add	r7, sp, #40	; 0x28
 80019ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e054      	b.n	8001a62 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f006 ff9c 	bl	8008910 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2203      	movs	r2, #3
 80019dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 ffca 	bl	8005990 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	687e      	ldr	r6, [r7, #4]
 8001a04:	466d      	mov	r5, sp
 8001a06:	f106 0410 	add.w	r4, r6, #16
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1a:	1d33      	adds	r3, r6, #4
 8001a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1e:	6838      	ldr	r0, [r7, #0]
 8001a20:	f003 ff44 	bl	80058ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 ffc1 	bl	80059b2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	687e      	ldr	r6, [r7, #4]
 8001a38:	466d      	mov	r5, sp
 8001a3a:	f106 0410 	add.w	r4, r6, #16
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a4e:	1d33      	adds	r3, r6, #4
 8001a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a52:	6838      	ldr	r0, [r7, #0]
 8001a54:	f004 f94a 	bl	8005cec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a6a:	b590      	push	{r4, r7, lr}
 8001a6c:	b089      	sub	sp, #36	; 0x24
 8001a6e:	af04      	add	r7, sp, #16
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	4608      	mov	r0, r1
 8001a74:	4611      	mov	r1, r2
 8001a76:	461a      	mov	r2, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	70fb      	strb	r3, [r7, #3]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70bb      	strb	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_HCD_HC_Init+0x28>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e076      	b.n	8001b80 <HAL_HCD_HC_Init+0x116>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	333d      	adds	r3, #61	; 0x3d
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3338      	adds	r3, #56	; 0x38
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3340      	adds	r3, #64	; 0x40
 8001acc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ace:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3339      	adds	r3, #57	; 0x39
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333f      	adds	r3, #63	; 0x3f
 8001af0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001af4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afe:	b2d0      	uxtb	r0, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	212c      	movs	r1, #44	; 0x2c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	333a      	adds	r3, #58	; 0x3a
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da09      	bge.n	8001b2c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	333b      	adds	r3, #59	; 0x3b
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e008      	b.n	8001b3e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	333b      	adds	r3, #59	; 0x3b
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	333c      	adds	r3, #60	; 0x3c
 8001b4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b50:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	787c      	ldrb	r4, [r7, #1]
 8001b58:	78ba      	ldrb	r2, [r7, #2]
 8001b5a:	78f9      	ldrb	r1, [r7, #3]
 8001b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	f004 fa43 	bl	8005ff8 <USB_HC_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_HCD_HC_Halt+0x1e>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e00f      	b.n	8001bc6 <HAL_HCD_HC_Halt+0x3e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fc93 	bl	80064e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	70fb      	strb	r3, [r7, #3]
 8001be2:	460b      	mov	r3, r1
 8001be4:	70bb      	strb	r3, [r7, #2]
 8001be6:	4613      	mov	r3, r2
 8001be8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	333b      	adds	r3, #59	; 0x3b
 8001bf8:	78ba      	ldrb	r2, [r7, #2]
 8001bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	333f      	adds	r3, #63	; 0x3f
 8001c0a:	787a      	ldrb	r2, [r7, #1]
 8001c0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c0e:	7c3b      	ldrb	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d112      	bne.n	8001c3a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3342      	adds	r3, #66	; 0x42
 8001c22:	2203      	movs	r2, #3
 8001c24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	333d      	adds	r3, #61	; 0x3d
 8001c34:	7f3a      	ldrb	r2, [r7, #28]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e008      	b.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	; 0x2c
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
 8001c44:	4413      	add	r3, r2
 8001c46:	3342      	adds	r3, #66	; 0x42
 8001c48:	2202      	movs	r2, #2
 8001c4a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	f200 80c6 	bhi.w	8001de0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c54:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5a:	bf00      	nop
 8001c5c:	08001c6d 	.word	0x08001c6d
 8001c60:	08001dcd 	.word	0x08001dcd
 8001c64:	08001cd1 	.word	0x08001cd1
 8001c68:	08001d4f 	.word	0x08001d4f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c6c:	7c3b      	ldrb	r3, [r7, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	f040 80b8 	bne.w	8001de4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c74:	78bb      	ldrb	r3, [r7, #2]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 80b4 	bne.w	8001de4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c7c:	8b3b      	ldrh	r3, [r7, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3355      	adds	r3, #85	; 0x55
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3355      	adds	r3, #85	; 0x55
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cba:	e093      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e089      	b.n	8001de4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cd0:	78bb      	ldrb	r3, [r7, #2]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11d      	bne.n	8001d12 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3355      	adds	r3, #85	; 0x55
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cfc:	e073      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	212c      	movs	r1, #44	; 0x2c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3342      	adds	r3, #66	; 0x42
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e069      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3354      	adds	r3, #84	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3342      	adds	r3, #66	; 0x42
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
      break;
 8001d38:	e055      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3342      	adds	r3, #66	; 0x42
 8001d48:	2202      	movs	r2, #2
 8001d4a:	701a      	strb	r2, [r3, #0]
      break;
 8001d4c:	e04b      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11d      	bne.n	8001d90 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3355      	adds	r3, #85	; 0x55
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d7a:	e034      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3342      	adds	r3, #66	; 0x42
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e02a      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3354      	adds	r3, #84	; 0x54
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	3342      	adds	r3, #66	; 0x42
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
      break;
 8001db6:	e016      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3342      	adds	r3, #66	; 0x42
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
      break;
 8001dca:	e00c      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3342      	adds	r3, #66	; 0x42
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001de0:	bf00      	nop
 8001de2:	e000      	b.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001de4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3344      	adds	r3, #68	; 0x44
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	8b3a      	ldrh	r2, [r7, #24]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	202c      	movs	r0, #44	; 0x2c
 8001e00:	fb00 f303 	mul.w	r3, r0, r3
 8001e04:	440b      	add	r3, r1
 8001e06:	334c      	adds	r3, #76	; 0x4c
 8001e08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3360      	adds	r3, #96	; 0x60
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3350      	adds	r3, #80	; 0x50
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	212c      	movs	r1, #44	; 0x2c
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3339      	adds	r3, #57	; 0x39
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3361      	adds	r3, #97	; 0x61
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	222c      	movs	r2, #44	; 0x2c
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	3338      	adds	r3, #56	; 0x38
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	18d1      	adds	r1, r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f004 f9e6 	bl	800623c <USB_HC_StartXfer>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop

08001e7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fee7 	bl	8005c66 <USB_GetMode>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	f040 80f6 	bne.w	800208c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fecb 	bl	8005c40 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80ec 	beq.w	800208a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fec2 	bl	8005c40 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ec6:	d104      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 feb2 	bl	8005c40 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee6:	d104      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ef0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fea2 	bl	8005c40 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f06:	d104      	bne.n	8001f12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fe92 	bl	8005c40 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d103      	bne.n	8001f2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fe84 	bl	8005c40 <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f42:	d11c      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f5e:	2110      	movs	r1, #16
 8001f60:	6938      	ldr	r0, [r7, #16]
 8001f62:	f003 fd73 	bl	8005a4c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f66:	6938      	ldr	r0, [r7, #16]
 8001f68:	f003 fda4 	bl	8005ab4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 ff7a 	bl	8005e6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f006 fd47 	bl	8008a0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fe5c 	bl	8005c40 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f92:	d102      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f001 f89e 	bl	80030d6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fe4e 	bl	8005c40 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d106      	bne.n	8001fbc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f006 fd10 	bl	80089d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 fe3d 	bl	8005c40 <USB_ReadInterrupts>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d101      	bne.n	8001fd4 <HAL_HCD_IRQHandler+0x158>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_HCD_IRQHandler+0x15a>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d012      	beq.n	8002000 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0210 	bic.w	r2, r2, #16
 8001fe8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 ffa1 	bl	8002f32 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0210 	orr.w	r2, r2, #16
 8001ffe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fe1b 	bl	8005c40 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002014:	d13a      	bne.n	800208c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f004 fa50 	bl	80064c0 <USB_HC_ReadInterrupt>
 8002020:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e025      	b.n	8002074 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d018      	beq.n	800206e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	d106      	bne.n	8002062 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8ab 	bl	80021b6 <HCD_HC_IN_IRQHandler>
 8002060:	e005      	b.n	800206e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fbf9 	bl	8002860 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3d4      	bcc.n	8002028 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	e000      	b.n	800208c <HAL_HCD_IRQHandler+0x210>
      return;
 800208a:	bf00      	nop
    }
  }
}
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_HCD_Start+0x16>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e013      	b.n	80020d0 <HAL_HCD_Start+0x3e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 ff3c 	bl	8005f34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fc54 	bl	800596e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_HCD_Stop+0x16>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e00d      	b.n	800210a <HAL_HCD_Stop+0x32>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 fb2a 	bl	8006754 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fede 	bl	8005ee0 <USB_ResetPort>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3360      	adds	r3, #96	; 0x60
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3350      	adds	r3, #80	; 0x50
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 ff22 	bl	8005fd4 <USB_GetCurrentFrame>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fefd 	bl	8005fa6 <USB_GetHostSpeed>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d11a      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	2304      	movs	r3, #4
 80021f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3361      	adds	r3, #97	; 0x61
 8002206:	2206      	movs	r2, #6
 8002208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f004 f964 	bl	80064e2 <USB_HC_Halt>
 800221a:	e0af      	b.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002232:	d11b      	bne.n	800226c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3361      	adds	r3, #97	; 0x61
 8002256:	2207      	movs	r2, #7
 8002258:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f93c 	bl	80064e2 <USB_HC_Halt>
 800226a:	e087      	b.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b20      	cmp	r3, #32
 8002280:	d109      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	2320      	movs	r3, #32
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	e072      	b.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d11a      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	461a      	mov	r2, r3
 80022ba:	2308      	movs	r3, #8
 80022bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3361      	adds	r3, #97	; 0x61
 80022cc:	2205      	movs	r2, #5
 80022ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 f901 	bl	80064e2 <USB_HC_Halt>
 80022e0:	e04c      	b.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f8:	d11b      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	2208      	movs	r2, #8
 800231e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 f8d9 	bl	80064e2 <USB_HC_Halt>
 8002330:	e024      	b.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002344:	2b80      	cmp	r3, #128	; 0x80
 8002346:	d119      	bne.n	800237c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	2206      	movs	r2, #6
 800236a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f004 f8b3 	bl	80064e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002392:	d112      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f89f 	bl	80064e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023b8:	e24e      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80df 	bne.w	8002590 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d019      	beq.n	800240e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3348      	adds	r3, #72	; 0x48
 80023e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0159      	lsls	r1, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	202c      	movs	r0, #44	; 0x2c
 8002404:	fb00 f303 	mul.w	r3, r0, r3
 8002408:	440b      	add	r3, r1
 800240a:	3350      	adds	r3, #80	; 0x50
 800240c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3361      	adds	r3, #97	; 0x61
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	335c      	adds	r3, #92	; 0x5c
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2301      	movs	r3, #1
 8002442:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	333f      	adds	r3, #63	; 0x3f
 8002466:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002468:	2b02      	cmp	r3, #2
 800246a:	d111      	bne.n	8002490 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f004 f833 	bl	80064e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	2310      	movs	r3, #16
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e03a      	b.n	8002506 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	333f      	adds	r3, #63	; 0x3f
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d009      	beq.n	80024b8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	333f      	adds	r3, #63	; 0x3f
 80024b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d126      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3360      	adds	r3, #96	; 0x60
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	b2d9      	uxtb	r1, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3360      	adds	r3, #96	; 0x60
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f006 fa91 	bl	8008a28 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d12b      	bne.n	8002566 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	3348      	adds	r3, #72	; 0x48
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	202c      	movs	r0, #44	; 0x2c
 8002524:	fb00 f202 	mul.w	r2, r0, r2
 8002528:	440a      	add	r2, r1
 800252a:	3240      	adds	r2, #64	; 0x40
 800252c:	8812      	ldrh	r2, [r2, #0]
 800252e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 818e 	beq.w	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3354      	adds	r3, #84	; 0x54
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	f083 0301 	eor.w	r3, r3, #1
 8002550:	b2d8      	uxtb	r0, r3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	3354      	adds	r3, #84	; 0x54
 8002560:	4602      	mov	r2, r0
 8002562:	701a      	strb	r2, [r3, #0]
}
 8002564:	e178      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3354      	adds	r3, #84	; 0x54
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2d8      	uxtb	r0, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3354      	adds	r3, #84	; 0x54
 800258a:	4602      	mov	r2, r0
 800258c:	701a      	strb	r2, [r3, #0]
}
 800258e:	e163      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 80f6 	bne.w	8002794 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d109      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e0c9      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d109      	bne.n	80025f8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3360      	adds	r3, #96	; 0x60
 80025f2:	2205      	movs	r2, #5
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e0b5      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3361      	adds	r3, #97	; 0x61
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d009      	beq.n	8002620 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3361      	adds	r3, #97	; 0x61
 800261a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800261c:	2b08      	cmp	r3, #8
 800261e:	d150      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	335c      	adds	r3, #92	; 0x5c
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	202c      	movs	r0, #44	; 0x2c
 8002638:	fb00 f303 	mul.w	r3, r0, r3
 800263c:	440b      	add	r3, r1
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	335c      	adds	r3, #92	; 0x5c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d912      	bls.n	800267c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	335c      	adds	r3, #92	; 0x5c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800267a:	e073      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3360      	adds	r3, #96	; 0x60
 800268a:	2202      	movs	r2, #2
 800268c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ac:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026c0:	e050      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3361      	adds	r3, #97	; 0x61
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d122      	bne.n	800271c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3360      	adds	r3, #96	; 0x60
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002706:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e023      	b.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b07      	cmp	r3, #7
 800272e:	d119      	bne.n	8002764 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	335c      	adds	r3, #92	; 0x5c
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	202c      	movs	r0, #44	; 0x2c
 8002748:	fb00 f303 	mul.w	r3, r0, r3
 800274c:	440b      	add	r3, r1
 800274e:	335c      	adds	r3, #92	; 0x5c
 8002750:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3360      	adds	r3, #96	; 0x60
 8002760:	2204      	movs	r2, #4
 8002762:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	2302      	movs	r3, #2
 8002774:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	b2d9      	uxtb	r1, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	202c      	movs	r0, #44	; 0x2c
 8002780:	fb00 f303 	mul.w	r3, r0, r3
 8002784:	4413      	add	r3, r2
 8002786:	3360      	adds	r3, #96	; 0x60
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f006 f94b 	bl	8008a28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002792:	e061      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d156      	bne.n	8002858 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333f      	adds	r3, #63	; 0x3f
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d111      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fe81 	bl	80064e2 <USB_HC_Halt>
 80027e0:	e031      	b.n	8002846 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	333f      	adds	r3, #63	; 0x3f
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	333f      	adds	r3, #63	; 0x3f
 8002804:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002806:	2b02      	cmp	r3, #2
 8002808:	d11d      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d110      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3361      	adds	r3, #97	; 0x61
 8002832:	2203      	movs	r2, #3
 8002834:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fe4e 	bl	80064e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	2310      	movs	r3, #16
 8002856:	6093      	str	r3, [r2, #8]
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11a      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2304      	movs	r3, #4
 80028a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3361      	adds	r3, #97	; 0x61
 80028b0:	2206      	movs	r2, #6
 80028b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fe0f 	bl	80064e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028c4:	e331      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d12e      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2320      	movs	r3, #32
 80028ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 8313 	bne.w	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333d      	adds	r3, #61	; 0x3d
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fdd5 	bl	80064e2 <USB_HC_Halt>
}
 8002938:	e2f7      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d112      	bne.n	8002978 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002964:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fdb6 	bl	80064e2 <USB_HC_Halt>
}
 8002976:	e2d8      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d140      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d111      	bne.n	80029da <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	333d      	adds	r3, #61	; 0x3d
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2301      	movs	r3, #1
 80029ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fd6a 	bl	80064e2 <USB_HC_Halt>
}
 8002a0e:	e28c      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b40      	cmp	r3, #64	; 0x40
 8002a24:	d12c      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3361      	adds	r3, #97	; 0x61
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	333d      	adds	r3, #61	; 0x3d
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	335c      	adds	r3, #92	; 0x5c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fd3b 	bl	80064e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	6093      	str	r3, [r2, #8]
}
 8002a7e:	e254      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11a      	bne.n	8002acc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fd0c 	bl	80064e2 <USB_HC_Halt>
}
 8002aca:	e22e      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d140      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	; 0x61
 8002b02:	2203      	movs	r2, #3
 8002b04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	333d      	adds	r3, #61	; 0x3d
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	333c      	adds	r3, #60	; 0x3c
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	333d      	adds	r3, #61	; 0x3d
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fcc9 	bl	80064e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2310      	movs	r3, #16
 8002b60:	6093      	str	r3, [r2, #8]
}
 8002b62:	e1e2      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d164      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d111      	bne.n	8002ba6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	2206      	movs	r2, #6
 8002b92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fc9f 	bl	80064e2 <USB_HC_Halt>
 8002ba4:	e044      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	335c      	adds	r3, #92	; 0x5c
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	335c      	adds	r3, #92	; 0x5c
 8002bc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	335c      	adds	r3, #92	; 0x5c
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d920      	bls.n	8002c1e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	335c      	adds	r3, #92	; 0x5c
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3360      	adds	r3, #96	; 0x60
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	b2d9      	uxtb	r1, r3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	202c      	movs	r0, #44	; 0x2c
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f005 ff06 	bl	8008a28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c1c:	e008      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3360      	adds	r3, #96	; 0x60
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	6093      	str	r3, [r2, #8]
}
 8002c42:	e172      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d11b      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3361      	adds	r3, #97	; 0x61
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fc32 	bl	80064e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c90:	6093      	str	r3, [r2, #8]
}
 8002c92:	e14a      	b.n	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	f040 813f 	bne.w	8002f2a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d17d      	bne.n	8002dbc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3360      	adds	r3, #96	; 0x60
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	333f      	adds	r3, #63	; 0x3f
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d00a      	beq.n	8002cfc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	f040 8100 	bne.w	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d113      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3355      	adds	r3, #85	; 0x55
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2d8      	uxtb	r0, r3
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3355      	adds	r3, #85	; 0x55
 8002d28:	4602      	mov	r2, r0
 8002d2a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 80e3 	bne.w	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	334c      	adds	r3, #76	; 0x4c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80d8 	beq.w	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	334c      	adds	r3, #76	; 0x4c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	202c      	movs	r0, #44	; 0x2c
 8002d62:	fb00 f202 	mul.w	r2, r0, r2
 8002d66:	440a      	add	r2, r1
 8002d68:	3240      	adds	r2, #64	; 0x40
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	202c      	movs	r0, #44	; 0x2c
 8002d76:	fb00 f202 	mul.w	r2, r0, r2
 8002d7a:	440a      	add	r2, r1
 8002d7c:	3240      	adds	r2, #64	; 0x40
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b5 	beq.w	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3355      	adds	r3, #85	; 0x55
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2d8      	uxtb	r0, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3355      	adds	r3, #85	; 0x55
 8002db6:	4602      	mov	r2, r0
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e09f      	b.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d109      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e08b      	b.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3361      	adds	r3, #97	; 0x61
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d109      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e077      	b.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3361      	adds	r3, #97	; 0x61
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d109      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3360      	adds	r3, #96	; 0x60
 8002e2e:	2205      	movs	r2, #5
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e063      	b.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3361      	adds	r3, #97	; 0x61
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b06      	cmp	r3, #6
 8002e46:	d009      	beq.n	8002e5c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3361      	adds	r3, #97	; 0x61
 8002e56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d14f      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	202c      	movs	r0, #44	; 0x2c
 8002e74:	fb00 f303 	mul.w	r3, r0, r3
 8002e78:	440b      	add	r3, r1
 8002e7a:	335c      	adds	r3, #92	; 0x5c
 8002e7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d912      	bls.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3360      	adds	r3, #96	; 0x60
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e021      	b.n	8002efc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b2d9      	uxtb	r1, r3
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	fb00 f303 	mul.w	r3, r0, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3360      	adds	r3, #96	; 0x60
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f005 fd7f 	bl	8008a28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f2a:	bf00      	nop
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	0c5b      	lsrs	r3, r3, #17
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f66:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d004      	beq.n	8002f78 <HCD_RXQLVL_IRQHandler+0x46>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	f000 80a9 	beq.w	80030c8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f76:	e0aa      	b.n	80030ce <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80a6 	beq.w	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3344      	adds	r3, #68	; 0x44
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 809b 	beq.w	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	441a      	add	r2, r3
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	202c      	movs	r0, #44	; 0x2c
 8002fb0:	fb00 f303 	mul.w	r3, r0, r3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	334c      	adds	r3, #76	; 0x4c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d87a      	bhi.n	80030b4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3344      	adds	r3, #68	; 0x44
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f002 fdda 	bl	8005b90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3344      	adds	r3, #68	; 0x44
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	441a      	add	r2, r3
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	202c      	movs	r0, #44	; 0x2c
 8002ff6:	fb00 f303 	mul.w	r3, r0, r3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3344      	adds	r3, #68	; 0x44
 8002ffe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3350      	adds	r3, #80	; 0x50
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	441a      	add	r2, r3
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	202c      	movs	r0, #44	; 0x2c
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	440b      	add	r3, r1
 8003020:	3350      	adds	r3, #80	; 0x50
 8003022:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	0cdb      	lsrs	r3, r3, #19
 8003034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003038:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3340      	adds	r3, #64	; 0x40
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4293      	cmp	r3, r2
 8003050:	d13c      	bne.n	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d039      	beq.n	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800306e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003076:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3354      	adds	r3, #84	; 0x54
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3354      	adds	r3, #84	; 0x54
 80030ae:	4602      	mov	r2, r0
 80030b0:	701a      	strb	r2, [r3, #0]
      break;
 80030b2:	e00b      	b.n	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3360      	adds	r3, #96	; 0x60
 80030c2:	2204      	movs	r2, #4
 80030c4:	701a      	strb	r2, [r3, #0]
      break;
 80030c6:	e001      	b.n	80030cc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030cc:	bf00      	nop
  }
}
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003102:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d10b      	bne.n	8003126 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f005 fc69 	bl	80089f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d132      	bne.n	8003196 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d126      	bne.n	8003190 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d113      	bne.n	8003172 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003154:	d106      	bne.n	8003164 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fe85 	bl	8005e6c <USB_InitFSLSPClkSel>
 8003162:	e011      	b.n	8003188 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f002 fe7e 	bl	8005e6c <USB_InitFSLSPClkSel>
 8003170:	e00a      	b.n	8003188 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d106      	bne.n	8003188 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003180:	461a      	mov	r2, r3
 8003182:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003186:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 fc5b 	bl	8008a44 <HAL_HCD_PortEnabled_Callback>
 800318e:	e002      	b.n	8003196 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f005 fc65 	bl	8008a60 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d103      	bne.n	80031a8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f043 0320 	orr.w	r3, r3, #32
 80031a6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e128      	b.n	8003420 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a90      	ldr	r2, [pc, #576]	; (8003428 <HAL_I2S_Init+0x26c>)
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fd85 	bl	8000cf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003204:	f023 030f 	bic.w	r3, r3, #15
 8003208:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2202      	movs	r2, #2
 8003210:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d060      	beq.n	80032dc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003222:	2310      	movs	r3, #16
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b20      	cmp	r3, #32
 8003232:	d802      	bhi.n	800323a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800323a:	2001      	movs	r0, #1
 800323c:	f001 f9d8 	bl	80045f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003240:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324a:	d125      	bne.n	8003298 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	fbb2 f2f3 	udiv	r2, r2, r3
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	3305      	adds	r3, #5
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	e01f      	b.n	80032b6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	461a      	mov	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	3305      	adds	r3, #5
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	e00e      	b.n	80032b6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	3305      	adds	r3, #5
 80032b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4a5c      	ldr	r2, [pc, #368]	; (800342c <HAL_I2S_Init+0x270>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	08db      	lsrs	r3, r3, #3
 80032c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e003      	b.n	80032e4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032dc:	2302      	movs	r3, #2
 80032de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d902      	bls.n	80032f0 <HAL_I2S_Init+0x134>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2bff      	cmp	r3, #255	; 0xff
 80032ee:	d907      	bls.n	8003300 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f043 0210 	orr.w	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e08f      	b.n	8003420 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	ea42 0103 	orr.w	r1, r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	430a      	orrs	r2, r1
 8003312:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800331e:	f023 030f 	bic.w	r3, r3, #15
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6851      	ldr	r1, [r2, #4]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6892      	ldr	r2, [r2, #8]
 800332a:	4311      	orrs	r1, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68d2      	ldr	r2, [r2, #12]
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6992      	ldr	r2, [r2, #24]
 8003336:	430a      	orrs	r2, r1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003342:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d161      	bne.n	8003410 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_I2S_Init+0x274>)
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a37      	ldr	r2, [pc, #220]	; (8003434 <HAL_I2S_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_I2S_Init+0x1a4>
 800335c:	4b36      	ldr	r3, [pc, #216]	; (8003438 <HAL_I2S_Init+0x27c>)
 800335e:	e001      	b.n	8003364 <HAL_I2S_Init+0x1a8>
 8003360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4932      	ldr	r1, [pc, #200]	; (8003434 <HAL_I2S_Init+0x278>)
 800336c:	428a      	cmp	r2, r1
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x1b8>
 8003370:	4a31      	ldr	r2, [pc, #196]	; (8003438 <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x1bc>
 8003374:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003378:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800337c:	f023 030f 	bic.w	r3, r3, #15
 8003380:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_I2S_Init+0x278>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_I2S_Init+0x1d4>
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_I2S_Init+0x27c>)
 800338e:	e001      	b.n	8003394 <HAL_I2S_Init+0x1d8>
 8003390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003394:	2202      	movs	r2, #2
 8003396:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a25      	ldr	r2, [pc, #148]	; (8003434 <HAL_I2S_Init+0x278>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_I2S_Init+0x1ea>
 80033a2:	4b25      	ldr	r3, [pc, #148]	; (8003438 <HAL_I2S_Init+0x27c>)
 80033a4:	e001      	b.n	80033aa <HAL_I2S_Init+0x1ee>
 80033a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d003      	beq.n	80033c0 <HAL_I2S_Init+0x204>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	e001      	b.n	80033cc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033f8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_I2S_Init+0x278>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_I2S_Init+0x24c>
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_I2S_Init+0x27c>)
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x250>
 8003408:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340c:	897a      	ldrh	r2, [r7, #10]
 800340e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08003533 	.word	0x08003533
 800342c:	cccccccd 	.word	0xcccccccd
 8003430:	08003649 	.word	0x08003649
 8003434:	40003800 	.word	0x40003800
 8003438:	40003400 	.word	0x40003400

0800343c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ffb8 	bl	800343c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	b292      	uxth	r2, r2
 80034e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	1c9a      	adds	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10e      	bne.n	800352a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff93 	bl	8003450 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b04      	cmp	r3, #4
 800354c:	d13a      	bne.n	80035c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d109      	bne.n	800356c <I2S_IRQHandler+0x3a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d102      	bne.n	800356c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffb4 	bl	80034d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d126      	bne.n	80035c4 <I2S_IRQHandler+0x92>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d11f      	bne.n	80035c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003592:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff50 	bl	8003464 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d136      	bne.n	800363e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d109      	bne.n	80035ee <I2S_IRQHandler+0xbc>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d102      	bne.n	80035ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff45 	bl	8003478 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d122      	bne.n	800363e <I2S_IRQHandler+0x10c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d11b      	bne.n	800363e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff13 	bl	8003464 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a92      	ldr	r2, [pc, #584]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003662:	4b92      	ldr	r3, [pc, #584]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8b      	ldr	r2, [pc, #556]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003680:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003682:	e001      	b.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d004      	beq.n	80036a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 8099 	bne.w	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d107      	bne.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f925 	bl	8003904 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9c8 	bl	8003a64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d13a      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d035      	beq.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036f2:	4b6e      	ldr	r3, [pc, #440]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4969      	ldr	r1, [pc, #420]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d101      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003706:	4b69      	ldr	r3, [pc, #420]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003708:	e001      	b.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800370a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003712:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003722:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fe88 	bl	8003464 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	f040 80c3 	bne.w	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80bd 	beq.w	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a49      	ldr	r2, [pc, #292]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003786:	4b49      	ldr	r3, [pc, #292]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4944      	ldr	r1, [pc, #272]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003796:	428b      	cmp	r3, r1
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800379a:	4b44      	ldr	r3, [pc, #272]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff fe4a 	bl	8003464 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d0:	e089      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d107      	bne.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8be 	bl	8003968 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8fd 	bl	8003a00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d12f      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d02a      	beq.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003828:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003836:	e001      	b.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4919      	ldr	r1, [pc, #100]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d101      	bne.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384a:	e001      	b.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003850:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003854:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fdfa 	bl	8003464 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	d136      	bne.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d031      	beq.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4902      	ldr	r1, [pc, #8]	; (80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800389e:	428b      	cmp	r3, r1
 80038a0:	d106      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038a2:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038a4:	e006      	b.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038a6:	bf00      	nop
 80038a8:	40003800 	.word	0x40003800
 80038ac:	40003400 	.word	0x40003400
 80038b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff fdc0 	bl	8003464 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e4:	e000      	b.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e6:	bf00      	nop
}
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c99      	adds	r1, r3, #2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6251      	str	r1, [r2, #36]	; 0x24
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d113      	bne.n	800395e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003944:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ffc9 	bl	80038f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c99      	adds	r1, r3, #2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6251      	str	r1, [r2, #36]	; 0x24
 800397a:	8819      	ldrh	r1, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <I2SEx_TxISR_I2SExt+0x22>
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <I2SEx_TxISR_I2SExt+0x94>)
 8003988:	e001      	b.n	800398e <I2SEx_TxISR_I2SExt+0x26>
 800398a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398e:	460a      	mov	r2, r1
 8003990:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d121      	bne.n	80039ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <I2SEx_TxISR_I2SExt+0x90>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <I2SEx_TxISR_I2SExt+0x50>
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <I2SEx_TxISR_I2SExt+0x94>)
 80039b6:	e001      	b.n	80039bc <I2SEx_TxISR_I2SExt+0x54>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	490d      	ldr	r1, [pc, #52]	; (80039f8 <I2SEx_TxISR_I2SExt+0x90>)
 80039c4:	428b      	cmp	r3, r1
 80039c6:	d101      	bne.n	80039cc <I2SEx_TxISR_I2SExt+0x64>
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <I2SEx_TxISR_I2SExt+0x94>)
 80039ca:	e001      	b.n	80039d0 <I2SEx_TxISR_I2SExt+0x68>
 80039cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff81 	bl	80038f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40003800 	.word	0x40003800
 80039fc:	40003400 	.word	0x40003400

08003a00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68d8      	ldr	r0, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	1c99      	adds	r1, r3, #2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a18:	b282      	uxth	r2, r0
 8003a1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d113      	bne.n	8003a5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff4a 	bl	80038f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <I2SEx_RxISR_I2SExt+0x90>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <I2SEx_RxISR_I2SExt+0x16>
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <I2SEx_RxISR_I2SExt+0x94>)
 8003a78:	e001      	b.n	8003a7e <I2SEx_RxISR_I2SExt+0x1a>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	68d8      	ldr	r0, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	1c99      	adds	r1, r3, #2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a8a:	b282      	uxth	r2, r0
 8003a8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <I2SEx_RxISR_I2SExt+0x90>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d101      	bne.n	8003ab4 <I2SEx_RxISR_I2SExt+0x50>
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ab2:	e001      	b.n	8003ab8 <I2SEx_RxISR_I2SExt+0x54>
 8003ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	490d      	ldr	r1, [pc, #52]	; (8003af4 <I2SEx_RxISR_I2SExt+0x90>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d101      	bne.n	8003ac8 <I2SEx_RxISR_I2SExt+0x64>
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <I2SEx_RxISR_I2SExt+0x94>)
 8003ac6:	e001      	b.n	8003acc <I2SEx_RxISR_I2SExt+0x68>
 8003ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003acc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff03 	bl	80038f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40003800 	.word	0x40003800
 8003af8:	40003400 	.word	0x40003400

08003afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e267      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d075      	beq.n	8003c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1a:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d00c      	beq.n	8003b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b85      	ldr	r3, [pc, #532]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d112      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b32:	4b82      	ldr	r3, [pc, #520]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3e:	d10b      	bne.n	8003b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	4b7e      	ldr	r3, [pc, #504]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05b      	beq.n	8003c04 <HAL_RCC_OscConfig+0x108>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d157      	bne.n	8003c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e242      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d106      	bne.n	8003b70 <HAL_RCC_OscConfig+0x74>
 8003b62:	4b76      	ldr	r3, [pc, #472]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a75      	ldr	r2, [pc, #468]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x98>
 8003b7a:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6f      	ldr	r2, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xb0>
 8003b94:	4b69      	ldr	r3, [pc, #420]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a68      	ldr	r2, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b66      	ldr	r3, [pc, #408]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a65      	ldr	r2, [pc, #404]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fb3c 	bl	8001230 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd fb38 	bl	8001230 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e207      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5b      	ldr	r3, [pc, #364]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xc0>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fb28 	bl	8001230 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fb24 	bl	8001230 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1f3      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0xe8>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2a:	4b44      	ldr	r3, [pc, #272]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c7      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4937      	ldr	r1, [pc, #220]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fadd 	bl	8001230 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fad9 	bl	8001230 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a8      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4925      	ldr	r1, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x244>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fabc 	bl	8001230 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fab8 	bl	8001230 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e187      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d036      	beq.n	8003d54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa9c 	bl	8001230 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fa98 	bl	8001230 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e167      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_OscConfig+0x240>)
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x200>
 8003d1a:	e01b      	b.n	8003d54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_OscConfig+0x248>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d22:	f7fd fa85 	bl	8001230 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	e00e      	b.n	8003d48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fa81 	bl	8001230 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d907      	bls.n	8003d48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e150      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	42470000 	.word	0x42470000
 8003d44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ea      	bne.n	8003d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8097 	beq.w	8003e90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d66:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	4b7d      	ldr	r3, [pc, #500]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a7c      	ldr	r2, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b77      	ldr	r3, [pc, #476]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b74      	ldr	r3, [pc, #464]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a73      	ldr	r2, [pc, #460]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fd fa41 	bl	8001230 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fd fa3d 	bl	8001230 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e10c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_RCC_OscConfig+0x474>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2ea>
 8003dd8:	4b64      	ldr	r3, [pc, #400]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x30c>
 8003dee:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0x324>
 8003e08:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a57      	ldr	r2, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a54      	ldr	r2, [pc, #336]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd fa02 	bl	8001230 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd f9fe 	bl	8001230 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0cb      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCC_OscConfig+0x334>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e54:	f7fd f9ec 	bl	8001230 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e5c:	f7fd f9e8 	bl	8001230 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0b5      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e72:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ee      	bne.n	8003e5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a1 	beq.w	8003fdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d05c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d141      	bne.n	8003f32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f9bc 	bl	8001230 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd f9b8 	bl	8001230 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e087      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	491b      	ldr	r1, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fd f991 	bl	8001230 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fd f98d 	bl	8001230 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e05c      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x416>
 8003f30:	e054      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_OscConfig+0x478>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fd f97a 	bl	8001230 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd f976 	bl	8001230 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e045      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_OscConfig+0x470>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x444>
 8003f5e:	e03d      	b.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e038      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4ec>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d028      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d121      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa8:	4013      	ands	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d111      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0cc      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d90c      	bls.n	8004028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d119      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e067      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4934      	ldr	r1, [pc, #208]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fd f8a8 	bl	8001230 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fd f8a4 	bl	8001230 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e04f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd f808 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08009f4c 	.word	0x08009f4c
 80041b0:	20000000 	.word	0x20000000
 80041b4:	20000004 	.word	0x20000004

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041bc:	b094      	sub	sp, #80	; 0x50
 80041be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	2300      	movs	r3, #0
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	2300      	movs	r3, #0
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d0:	4b79      	ldr	r3, [pc, #484]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 030c 	and.w	r3, r3, #12
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d00d      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0x40>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	f200 80e1 	bhi.w	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x34>
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ea:	e0db      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ec:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041f0:	e0db      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f2:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f6:	e0d8      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f8:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004202:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d063      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	2200      	movs	r2, #0
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
 8004218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
 8004222:	2300      	movs	r3, #0
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
 8004226:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	6139      	str	r1, [r7, #16]
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800425c:	4659      	mov	r1, fp
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4651      	mov	r1, sl
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4651      	mov	r1, sl
 800426c:	ebb2 0801 	subs.w	r8, r2, r1
 8004270:	4659      	mov	r1, fp
 8004272:	eb63 0901 	sbc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	462b      	mov	r3, r5
 8004298:	eb49 0303 	adc.w	r3, r9, r3
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042aa:	4629      	mov	r1, r5
 80042ac:	024b      	lsls	r3, r1, #9
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b4:	4621      	mov	r1, r4
 80042b6:	024a      	lsls	r2, r1, #9
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042be:	2200      	movs	r2, #0
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c8:	f7fb ffd2 	bl	8000270 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	e058      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	2200      	movs	r2, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	4611      	mov	r1, r2
 80042e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004302:	0150      	lsls	r0, r2, #5
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4641      	mov	r1, r8
 800430a:	ebb2 0a01 	subs.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb63 0b01 	sbc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004328:	ebb2 040a 	subs.w	r4, r2, sl
 800432c:	eb63 050b 	sbc.w	r5, r3, fp
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	464b      	mov	r3, r9
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	61fa      	str	r2, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	f7fb ff78 	bl	8000270 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	3301      	adds	r3, #1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x204>)
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3750      	adds	r7, #80	; 0x50
 80043b0:	46bd      	mov	sp, r7
 80043b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	007a1200 	.word	0x007a1200

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08009f5c 	.word	0x08009f5c

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08009f5c 	.word	0x08009f5c

0800442c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004450:	2b00      	cmp	r3, #0
 8004452:	d035      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004454:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800445a:	f7fc fee9 	bl	8001230 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004462:	f7fc fee5 	bl	8001230 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0b0      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004474:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	019a      	lsls	r2, r3, #6
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	071b      	lsls	r3, r3, #28
 800448c:	4955      	ldr	r1, [pc, #340]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004494:	4b52      	ldr	r3, [pc, #328]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449a:	f7fc fec9 	bl	8001230 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044a2:	f7fc fec5 	bl	8001230 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e090      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b4:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8083 	beq.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	4a43      	ldr	r2, [pc, #268]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	; 0x40
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ea:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3e      	ldr	r2, [pc, #248]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fc fe9b 	bl	8001230 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fc fe97 	bl	8001230 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e062      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800451c:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004524:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	429a      	cmp	r2, r3
 8004538:	d028      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454a:	4b28      	ldr	r3, [pc, #160]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004550:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004556:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d114      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004562:	f7fc fe65 	bl	8001230 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fc fe61 	bl	8001230 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e02a      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004598:	d10d      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	490d      	ldr	r1, [pc, #52]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]
 80045b4:	e005      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ce:	4905      	ldr	r1, [pc, #20]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	42470068 	.word	0x42470068
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470e40 	.word	0x42470e40

080045f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d13e      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d12f      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004626:	617b      	str	r3, [r7, #20]
          break;
 8004628:	e02f      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004636:	d108      	bne.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004640:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e007      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004652:	4a15      	ldr	r2, [pc, #84]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800465c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004674:	0f1b      	lsrs	r3, r3, #28
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]
          break;
 8004682:	e002      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
          break;
 8004688:	bf00      	nop
        }
      }
      break;
 800468a:	bf00      	nop
    }
  }
  return frequency;
 800468c:	697b      	ldr	r3, [r7, #20]
}
 800468e:	4618      	mov	r0, r3
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	00bb8000 	.word	0x00bb8000
 80046a4:	007a1200 	.word	0x007a1200
 80046a8:	00f42400 	.word	0x00f42400

080046ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07b      	b.n	80047b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ce:	d009      	beq.n	80046e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	61da      	str	r2, [r3, #28]
 80046d6:	e005      	b.n	80046e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fb7a 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	ea42 0103 	orr.w	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0104 	and.w	r1, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0210 	and.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e03f      	b.n	8004850 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fb4f 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2224      	movs	r2, #36	; 0x24
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004800:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fdde 	bl	80053c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004816:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004826:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004836:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	d17c      	bne.n	8004972 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Transmit+0x2c>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e075      	b.n	8004974 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_UART_Transmit+0x3e>
 8004892:	2302      	movs	r3, #2
 8004894:	e06e      	b.n	8004974 <HAL_UART_Transmit+0x11c>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2221      	movs	r2, #33	; 0x21
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ac:	f7fc fcc0 	bl	8001230 <HAL_GetTick>
 80048b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c6:	d108      	bne.n	80048da <HAL_UART_Transmit+0x82>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	e003      	b.n	80048e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048ea:	e02a      	b.n	8004942 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fb1e 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e036      	b.n	8004974 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	3302      	adds	r3, #2
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e007      	b.n	8004934 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1cf      	bne.n	80048ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	2140      	movs	r1, #64	; 0x40
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 faee 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e006      	b.n	8004974 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	d11d      	bne.n	80049d2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Receive_IT+0x26>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e016      	b.n	80049d4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Receive_IT+0x38>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e00f      	b.n	80049d4 <HAL_UART_Receive_IT+0x58>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fb23 	bl	8005014 <UART_Start_Receive_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	e000      	b.n	80049d4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b0ba      	sub	sp, #232	; 0xe8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10f      	bne.n	8004a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_UART_IRQHandler+0x66>
 8004a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fc07 	bl	800524e <UART_Receive_IT>
      return;
 8004a40:	e256      	b.n	8004ef0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80de 	beq.w	8004c08 <HAL_UART_IRQHandler+0x22c>
 8004a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80d1 	beq.w	8004c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_UART_IRQHandler+0xae>
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_UART_IRQHandler+0xd2>
 8004a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f043 0202 	orr.w	r2, r3, #2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xf6>
 8004aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d011      	beq.n	8004b02 <HAL_UART_IRQHandler+0x126>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0208 	orr.w	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 81ed 	beq.w	8004ee6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_UART_IRQHandler+0x14e>
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb92 	bl	800524e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <HAL_UART_IRQHandler+0x17a>
 8004b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d04f      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa9a 	bl	8005090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d141      	bne.n	8004bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3314      	adds	r3, #20
 8004b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1d9      	bne.n	8004b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d013      	beq.n	8004be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	4a7d      	ldr	r2, [pc, #500]	; (8004db8 <HAL_UART_IRQHandler+0x3dc>)
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fce1 	bl	8001592 <HAL_DMA_Abort_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be0:	4610      	mov	r0, r2
 8004be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	e00e      	b.n	8004c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f990 	bl	8004f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00a      	b.n	8004c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f98c 	bl	8004f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e006      	b.n	8004c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f988 	bl	8004f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c02:	e170      	b.n	8004ee6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	bf00      	nop
    return;
 8004c06:	e16e      	b.n	8004ee6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f040 814a 	bne.w	8004ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8143 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 813c 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	f040 80b4 	bne.w	8004dbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8140 	beq.w	8004eea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c72:	429a      	cmp	r2, r3
 8004c74:	f080 8139 	bcs.w	8004eea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	f000 8088 	beq.w	8004d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1d9      	bne.n	8004c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e1      	bne.n	8004cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e3      	bne.n	8004d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6e:	f023 0310 	bic.w	r3, r3, #16
 8004d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d80:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e3      	bne.n	8004d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fc fb8a 	bl	80014b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8b6 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004db4:	e099      	b.n	8004eea <HAL_UART_IRQHandler+0x50e>
 8004db6:	bf00      	nop
 8004db8:	08005157 	.word	0x08005157
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 808b 	beq.w	8004eee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8086 	beq.w	8004eee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e06:	647a      	str	r2, [r7, #68]	; 0x44
 8004e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	623b      	str	r3, [r7, #32]
   return(result);
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e84:	61fa      	str	r2, [r7, #28]
 8004e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	617b      	str	r3, [r7, #20]
   return(result);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e3      	bne.n	8004e60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f83e 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea4:	e023      	b.n	8004eee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d009      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x4ea>
 8004eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f95d 	bl	800517e <UART_Transmit_IT>
    return;
 8004ec4:	e014      	b.n	8004ef0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x514>
 8004ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f99d 	bl	800521e <UART_EndTransmit_IT>
    return;
 8004ee4:	e004      	b.n	8004ef0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eee:	bf00      	nop
  }
}
 8004ef0:	37e8      	adds	r7, #232	; 0xe8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop

08004ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b090      	sub	sp, #64	; 0x40
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	e050      	b.n	8004fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f50:	d04c      	beq.n	8004fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f58:	f7fc f96a 	bl	8001230 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d241      	bcs.n	8004fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f88:	637a      	str	r2, [r7, #52]	; 0x34
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	613b      	str	r3, [r7, #16]
   return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fbc:	623a      	str	r2, [r7, #32]
 8004fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e00f      	b.n	800500c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	429a      	cmp	r2, r3
 8005008:	d09f      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3740      	adds	r7, #64	; 0x40
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2222      	movs	r2, #34	; 0x22
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d007      	beq.n	8005062 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005060:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0220 	orr.w	r2, r2, #32
 8005080:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b095      	sub	sp, #84	; 0x54
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b8:	643a      	str	r2, [r7, #64]	; 0x40
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	61fb      	str	r3, [r7, #28]
   return(result);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	2b01      	cmp	r3, #1
 8005106:	d119      	bne.n	800513c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	60bb      	str	r3, [r7, #8]
   return(result);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f023 0310 	bic.w	r3, r3, #16
 800511e:	647b      	str	r3, [r7, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005128:	61ba      	str	r2, [r7, #24]
 800512a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	613b      	str	r3, [r7, #16]
   return(result);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e5      	bne.n	8005108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800514a:	bf00      	nop
 800514c:	3754      	adds	r7, #84	; 0x54
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fecb 	bl	8004f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b21      	cmp	r3, #33	; 0x21
 8005190:	d13e      	bne.n	8005210 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d114      	bne.n	80051c6 <UART_Transmit_IT+0x48>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d110      	bne.n	80051c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]
 80051c4:	e008      	b.n	80051d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	1c59      	adds	r1, r3, #1
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6211      	str	r1, [r2, #32]
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10f      	bne.n	800520c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005234:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fe5a 	bl	8004ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b08c      	sub	sp, #48	; 0x30
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b22      	cmp	r3, #34	; 0x22
 8005260:	f040 80ab 	bne.w	80053ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526c:	d117      	bne.n	800529e <UART_Receive_IT+0x50>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d113      	bne.n	800529e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528c:	b29a      	uxth	r2, r3
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
 800529c:	e026      	b.n	80052ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d007      	beq.n	80052c2 <UART_Receive_IT+0x74>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <UART_Receive_IT+0x82>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e008      	b.n	80052e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d15a      	bne.n	80053b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0220 	bic.w	r2, r2, #32
 800530e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2b01      	cmp	r3, #1
 800533e:	d135      	bne.n	80053ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	613b      	str	r3, [r7, #16]
   return(result);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f023 0310 	bic.w	r3, r3, #16
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	623a      	str	r2, [r7, #32]
 8005368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	69f9      	ldr	r1, [r7, #28]
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	61bb      	str	r3, [r7, #24]
   return(result);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e5      	bne.n	8005346 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d10a      	bne.n	800539e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fdbb 	bl	8004f20 <HAL_UARTEx_RxEventCallback>
 80053aa:	e002      	b.n	80053b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fb fb85 	bl	8000abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	e002      	b.n	80053bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3730      	adds	r7, #48	; 0x30
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c8:	b0c0      	sub	sp, #256	; 0x100
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e0:	68d9      	ldr	r1, [r3, #12]
 80053e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	ea40 0301 	orr.w	r3, r0, r1
 80053ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	431a      	orrs	r2, r3
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800541c:	f021 010c 	bic.w	r1, r1, #12
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800542a:	430b      	orrs	r3, r1
 800542c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543e:	6999      	ldr	r1, [r3, #24]
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	ea40 0301 	orr.w	r3, r0, r1
 800544a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b8f      	ldr	r3, [pc, #572]	; (8005690 <UART_SetConfig+0x2cc>)
 8005454:	429a      	cmp	r2, r3
 8005456:	d005      	beq.n	8005464 <UART_SetConfig+0xa0>
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b8d      	ldr	r3, [pc, #564]	; (8005694 <UART_SetConfig+0x2d0>)
 8005460:	429a      	cmp	r2, r3
 8005462:	d104      	bne.n	800546e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005464:	f7fe ffce 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8005468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800546c:	e003      	b.n	8005476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800546e:	f7fe ffb5 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8005472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	f040 810c 	bne.w	800569c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800548e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005496:	4622      	mov	r2, r4
 8005498:	462b      	mov	r3, r5
 800549a:	1891      	adds	r1, r2, r2
 800549c:	65b9      	str	r1, [r7, #88]	; 0x58
 800549e:	415b      	adcs	r3, r3
 80054a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054a6:	4621      	mov	r1, r4
 80054a8:	eb12 0801 	adds.w	r8, r2, r1
 80054ac:	4629      	mov	r1, r5
 80054ae:	eb43 0901 	adc.w	r9, r3, r1
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c6:	4690      	mov	r8, r2
 80054c8:	4699      	mov	r9, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	eb18 0303 	adds.w	r3, r8, r3
 80054d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054d4:	462b      	mov	r3, r5
 80054d6:	eb49 0303 	adc.w	r3, r9, r3
 80054da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054f2:	460b      	mov	r3, r1
 80054f4:	18db      	adds	r3, r3, r3
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
 80054f8:	4613      	mov	r3, r2
 80054fa:	eb42 0303 	adc.w	r3, r2, r3
 80054fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005508:	f7fa feb2 	bl	8000270 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4b61      	ldr	r3, [pc, #388]	; (8005698 <UART_SetConfig+0x2d4>)
 8005512:	fba3 2302 	umull	r2, r3, r3, r2
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	011c      	lsls	r4, r3, #4
 800551a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800551e:	2200      	movs	r2, #0
 8005520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	1891      	adds	r1, r2, r2
 8005532:	64b9      	str	r1, [r7, #72]	; 0x48
 8005534:	415b      	adcs	r3, r3
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800553c:	4641      	mov	r1, r8
 800553e:	eb12 0a01 	adds.w	sl, r2, r1
 8005542:	4649      	mov	r1, r9
 8005544:	eb43 0b01 	adc.w	fp, r3, r1
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800555c:	4692      	mov	sl, r2
 800555e:	469b      	mov	fp, r3
 8005560:	4643      	mov	r3, r8
 8005562:	eb1a 0303 	adds.w	r3, sl, r3
 8005566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800556a:	464b      	mov	r3, r9
 800556c:	eb4b 0303 	adc.w	r3, fp, r3
 8005570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005588:	460b      	mov	r3, r1
 800558a:	18db      	adds	r3, r3, r3
 800558c:	643b      	str	r3, [r7, #64]	; 0x40
 800558e:	4613      	mov	r3, r2
 8005590:	eb42 0303 	adc.w	r3, r2, r3
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
 8005596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800559a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800559e:	f7fa fe67 	bl	8000270 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <UART_SetConfig+0x2d4>)
 80055aa:	fba3 2301 	umull	r2, r3, r3, r1
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2264      	movs	r2, #100	; 0x64
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	1acb      	subs	r3, r1, r3
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055be:	4b36      	ldr	r3, [pc, #216]	; (8005698 <UART_SetConfig+0x2d4>)
 80055c0:	fba3 2302 	umull	r2, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055cc:	441c      	add	r4, r3
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	1891      	adds	r1, r2, r2
 80055e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055e8:	415b      	adcs	r3, r3
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055f0:	4641      	mov	r1, r8
 80055f2:	1851      	adds	r1, r2, r1
 80055f4:	6339      	str	r1, [r7, #48]	; 0x30
 80055f6:	4649      	mov	r1, r9
 80055f8:	414b      	adcs	r3, r1
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005608:	4659      	mov	r1, fp
 800560a:	00cb      	lsls	r3, r1, #3
 800560c:	4651      	mov	r1, sl
 800560e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005612:	4651      	mov	r1, sl
 8005614:	00ca      	lsls	r2, r1, #3
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	4603      	mov	r3, r0
 800561c:	4642      	mov	r2, r8
 800561e:	189b      	adds	r3, r3, r2
 8005620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005624:	464b      	mov	r3, r9
 8005626:	460a      	mov	r2, r1
 8005628:	eb42 0303 	adc.w	r3, r2, r3
 800562c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800563c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005644:	460b      	mov	r3, r1
 8005646:	18db      	adds	r3, r3, r3
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
 800564a:	4613      	mov	r3, r2
 800564c:	eb42 0303 	adc.w	r3, r2, r3
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800565a:	f7fa fe09 	bl	8000270 <__aeabi_uldivmod>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <UART_SetConfig+0x2d4>)
 8005664:	fba3 1302 	umull	r1, r3, r3, r2
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	2164      	movs	r1, #100	; 0x64
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	3332      	adds	r3, #50	; 0x32
 8005676:	4a08      	ldr	r2, [pc, #32]	; (8005698 <UART_SetConfig+0x2d4>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	095b      	lsrs	r3, r3, #5
 800567e:	f003 0207 	and.w	r2, r3, #7
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4422      	add	r2, r4
 800568a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800568c:	e105      	b.n	800589a <UART_SetConfig+0x4d6>
 800568e:	bf00      	nop
 8005690:	40011000 	.word	0x40011000
 8005694:	40011400 	.word	0x40011400
 8005698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056ae:	4642      	mov	r2, r8
 80056b0:	464b      	mov	r3, r9
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	6239      	str	r1, [r7, #32]
 80056b6:	415b      	adcs	r3, r3
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056be:	4641      	mov	r1, r8
 80056c0:	1854      	adds	r4, r2, r1
 80056c2:	4649      	mov	r1, r9
 80056c4:	eb43 0501 	adc.w	r5, r3, r1
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	00eb      	lsls	r3, r5, #3
 80056d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d6:	00e2      	lsls	r2, r4, #3
 80056d8:	4614      	mov	r4, r2
 80056da:	461d      	mov	r5, r3
 80056dc:	4643      	mov	r3, r8
 80056de:	18e3      	adds	r3, r4, r3
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e4:	464b      	mov	r3, r9
 80056e6:	eb45 0303 	adc.w	r3, r5, r3
 80056ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800570a:	4629      	mov	r1, r5
 800570c:	008b      	lsls	r3, r1, #2
 800570e:	4621      	mov	r1, r4
 8005710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005714:	4621      	mov	r1, r4
 8005716:	008a      	lsls	r2, r1, #2
 8005718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800571c:	f7fa fda8 	bl	8000270 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4b60      	ldr	r3, [pc, #384]	; (80058a8 <UART_SetConfig+0x4e4>)
 8005726:	fba3 2302 	umull	r2, r3, r3, r2
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	011c      	lsls	r4, r3, #4
 800572e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800573c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	1891      	adds	r1, r2, r2
 8005746:	61b9      	str	r1, [r7, #24]
 8005748:	415b      	adcs	r3, r3
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005750:	4641      	mov	r1, r8
 8005752:	1851      	adds	r1, r2, r1
 8005754:	6139      	str	r1, [r7, #16]
 8005756:	4649      	mov	r1, r9
 8005758:	414b      	adcs	r3, r1
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005768:	4659      	mov	r1, fp
 800576a:	00cb      	lsls	r3, r1, #3
 800576c:	4651      	mov	r1, sl
 800576e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005772:	4651      	mov	r1, sl
 8005774:	00ca      	lsls	r2, r1, #3
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	4603      	mov	r3, r0
 800577c:	4642      	mov	r2, r8
 800577e:	189b      	adds	r3, r3, r2
 8005780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	67bb      	str	r3, [r7, #120]	; 0x78
 800579a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057a8:	4649      	mov	r1, r9
 80057aa:	008b      	lsls	r3, r1, #2
 80057ac:	4641      	mov	r1, r8
 80057ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b2:	4641      	mov	r1, r8
 80057b4:	008a      	lsls	r2, r1, #2
 80057b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057ba:	f7fa fd59 	bl	8000270 <__aeabi_uldivmod>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <UART_SetConfig+0x4e4>)
 80057c4:	fba3 1302 	umull	r1, r3, r3, r2
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	2164      	movs	r1, #100	; 0x64
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	3332      	adds	r3, #50	; 0x32
 80057d6:	4a34      	ldr	r2, [pc, #208]	; (80058a8 <UART_SetConfig+0x4e4>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e2:	441c      	add	r4, r3
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	673b      	str	r3, [r7, #112]	; 0x70
 80057ec:	677a      	str	r2, [r7, #116]	; 0x74
 80057ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057f2:	4642      	mov	r2, r8
 80057f4:	464b      	mov	r3, r9
 80057f6:	1891      	adds	r1, r2, r2
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	415b      	adcs	r3, r3
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005802:	4641      	mov	r1, r8
 8005804:	1851      	adds	r1, r2, r1
 8005806:	6039      	str	r1, [r7, #0]
 8005808:	4649      	mov	r1, r9
 800580a:	414b      	adcs	r3, r1
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800581a:	4659      	mov	r1, fp
 800581c:	00cb      	lsls	r3, r1, #3
 800581e:	4651      	mov	r1, sl
 8005820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005824:	4651      	mov	r1, sl
 8005826:	00ca      	lsls	r2, r1, #3
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	4603      	mov	r3, r0
 800582e:	4642      	mov	r2, r8
 8005830:	189b      	adds	r3, r3, r2
 8005832:	66bb      	str	r3, [r7, #104]	; 0x68
 8005834:	464b      	mov	r3, r9
 8005836:	460a      	mov	r2, r1
 8005838:	eb42 0303 	adc.w	r3, r2, r3
 800583c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	663b      	str	r3, [r7, #96]	; 0x60
 8005848:	667a      	str	r2, [r7, #100]	; 0x64
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005856:	4649      	mov	r1, r9
 8005858:	008b      	lsls	r3, r1, #2
 800585a:	4641      	mov	r1, r8
 800585c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005860:	4641      	mov	r1, r8
 8005862:	008a      	lsls	r2, r1, #2
 8005864:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005868:	f7fa fd02 	bl	8000270 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <UART_SetConfig+0x4e4>)
 8005872:	fba3 1302 	umull	r1, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	2164      	movs	r1, #100	; 0x64
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	3332      	adds	r3, #50	; 0x32
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <UART_SetConfig+0x4e4>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4422      	add	r2, r4
 8005898:	609a      	str	r2, [r3, #8]
}
 800589a:	bf00      	nop
 800589c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058a0:	46bd      	mov	sp, r7
 80058a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a6:	bf00      	nop
 80058a8:	51eb851f 	.word	0x51eb851f

080058ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ac:	b084      	sub	sp, #16
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	f107 001c 	add.w	r0, r7, #28
 80058ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d122      	bne.n	800590a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d105      	bne.n	80058fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9c0 	bl	8005c84 <USB_CoreReset>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
 8005908:	e01a      	b.n	8005940 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9b4 	bl	8005c84 <USB_CoreReset>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
 8005932:	e005      	b.n	8005940 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10b      	bne.n	800595e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f043 0206 	orr.w	r2, r3, #6
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596a:	b004      	add	sp, #16
 800596c:	4770      	bx	lr

0800596e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 0201 	bic.w	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d115      	bne.n	8005a00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f7fb fc31 	bl	8001248 <HAL_Delay>
      ms++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f93a 	bl	8005c66 <USB_GetMode>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d01e      	beq.n	8005a36 <USB_SetCurrentMode+0x84>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b31      	cmp	r3, #49	; 0x31
 80059fc:	d9f0      	bls.n	80059e0 <USB_SetCurrentMode+0x2e>
 80059fe:	e01a      	b.n	8005a36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d115      	bne.n	8005a32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fb fc18 	bl	8001248 <HAL_Delay>
      ms++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f921 	bl	8005c66 <USB_GetMode>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <USB_SetCurrentMode+0x84>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b31      	cmp	r3, #49	; 0x31
 8005a2e:	d9f0      	bls.n	8005a12 <USB_SetCurrentMode+0x60>
 8005a30:	e001      	b.n	8005a36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e005      	b.n	8005a42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b32      	cmp	r3, #50	; 0x32
 8005a3a:	d101      	bne.n	8005a40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <USB_FlushTxFifo+0x64>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01b      	b.n	8005aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	daf2      	bge.n	8005a5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	019b      	lsls	r3, r3, #6
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <USB_FlushTxFifo+0x64>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e006      	b.n	8005aa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d0f0      	beq.n	8005a84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	00030d40 	.word	0x00030d40

08005ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <USB_FlushRxFifo+0x5c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e018      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	daf2      	bge.n	8005ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <USB_FlushRxFifo+0x5c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	00030d40 	.word	0x00030d40

08005b14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	460b      	mov	r3, r1
 8005b24:	71fb      	strb	r3, [r7, #7]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d123      	bne.n	8005b82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e018      	b.n	8005b7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	031a      	lsls	r2, r3, #12
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	461a      	mov	r2, r3
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3301      	adds	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3e2      	bcc.n	8005b48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3724      	adds	r7, #36	; 0x24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b08b      	sub	sp, #44	; 0x2c
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	089b      	lsrs	r3, r3, #2
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	e014      	b.n	8005be6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	3301      	adds	r3, #1
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	3301      	adds	r3, #1
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3301      	adds	r3, #1
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d3e6      	bcc.n	8005bbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bee:	8bfb      	ldrh	r3, [r7, #30]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01e      	beq.n	8005c32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	701a      	strb	r2, [r3, #0]
      i++;
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c26:	8bfb      	ldrh	r3, [r7, #30]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c2c:	8bfb      	ldrh	r3, [r7, #30]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ea      	bne.n	8005c08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	372c      	adds	r7, #44	; 0x2c
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c58:	68fb      	ldr	r3, [r7, #12]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0301 	and.w	r3, r3, #1
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <USB_CoreReset+0x64>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d901      	bls.n	8005ca2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e01b      	b.n	8005cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	daf2      	bge.n	8005c90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f043 0201 	orr.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <USB_CoreReset+0x64>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e006      	b.n	8005cda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d0f0      	beq.n	8005cba <USB_CoreReset+0x36>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	00030d40 	.word	0x00030d40

08005cec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cec:	b084      	sub	sp, #16
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d018      	beq.n	8005d74 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10a      	bne.n	8005d5e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d56:	f043 0304 	orr.w	r3, r3, #4
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e014      	b.n	8005d88 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d6c:	f023 0304 	bic.w	r3, r3, #4
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e009      	b.n	8005d88 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d82:	f023 0304 	bic.w	r3, r3, #4
 8005d86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d88:	2110      	movs	r1, #16
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fe5e 	bl	8005a4c <USB_FlushTxFifo>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fe8a 	bl	8005ab4 <USB_FlushRxFifo>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	e015      	b.n	8005ddc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3e5      	bcc.n	8005db0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <USB_HostInit+0x16c>)
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <USB_HostInit+0x170>)
 8005e10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e14:	e009      	b.n	8005e2a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2280      	movs	r2, #128	; 0x80
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <USB_HostInit+0x174>)
 8005e20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a0f      	ldr	r2, [pc, #60]	; (8005e64 <USB_HostInit+0x178>)
 8005e26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f043 0210 	orr.w	r2, r3, #16
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <USB_HostInit+0x17c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e54:	b004      	add	sp, #16
 8005e56:	4770      	bx	lr
 8005e58:	01000200 	.word	0x01000200
 8005e5c:	00e00300 	.word	0x00e00300
 8005e60:	00600080 	.word	0x00600080
 8005e64:	004000e0 	.word	0x004000e0
 8005e68:	a3200008 	.word	0xa3200008

08005e6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e009      	b.n	8005ed2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d106      	bne.n	8005ed2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ed0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f10:	2064      	movs	r0, #100	; 0x64
 8005f12:	f7fb f999 	bl	8001248 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f24:	200a      	movs	r0, #10
 8005f26:	f7fb f98f 	bl	8001248 <HAL_Delay>

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <USB_DriveVbus+0x44>
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d106      	bne.n	8005f78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d109      	bne.n	8005f98 <USB_DriveVbus+0x64>
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	0c5b      	lsrs	r3, r3, #17
 8005fc4:	f003 0303 	and.w	r3, r3, #3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	b29b      	uxth	r3, r3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	461a      	mov	r2, r3
 8006006:	4603      	mov	r3, r0
 8006008:	70fb      	strb	r3, [r7, #3]
 800600a:	460b      	mov	r3, r1
 800600c:	70bb      	strb	r3, [r7, #2]
 800600e:	4613      	mov	r3, r2
 8006010:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	461a      	mov	r2, r3
 8006028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800602c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800602e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006032:	2b03      	cmp	r3, #3
 8006034:	d87e      	bhi.n	8006134 <USB_HC_Init+0x13c>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <USB_HC_Init+0x44>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800604d 	.word	0x0800604d
 8006040:	080060f7 	.word	0x080060f7
 8006044:	0800604d 	.word	0x0800604d
 8006048:	080060b9 	.word	0x080060b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	461a      	mov	r2, r3
 800605a:	f240 439d 	movw	r3, #1181	; 0x49d
 800605e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006060:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	da10      	bge.n	800608a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006086:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006088:	e057      	b.n	800613a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d051      	beq.n	800613a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060b4:	60d3      	str	r3, [r2, #12]
      break;
 80060b6:	e040      	b.n	800613a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c4:	461a      	mov	r2, r3
 80060c6:	f240 639d 	movw	r3, #1693	; 0x69d
 80060ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da34      	bge.n	800613e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	78fa      	ldrb	r2, [r7, #3]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060f4:	e023      	b.n	800613e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	461a      	mov	r2, r3
 8006104:	f240 2325 	movw	r3, #549	; 0x225
 8006108:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800610a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800610e:	2b00      	cmp	r3, #0
 8006110:	da17      	bge.n	8006142 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	440a      	add	r2, r1
 8006128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006130:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006132:	e006      	b.n	8006142 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	77fb      	strb	r3, [r7, #31]
      break;
 8006138:	e004      	b.n	8006144 <USB_HC_Init+0x14c>
      break;
 800613a:	bf00      	nop
 800613c:	e002      	b.n	8006144 <USB_HC_Init+0x14c>
      break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <USB_HC_Init+0x14c>
      break;
 8006142:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	440a      	add	r2, r1
 800615a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	2101      	movs	r1, #1
 8006174:	fa01 f303 	lsl.w	r3, r1, r3
 8006178:	6939      	ldr	r1, [r7, #16]
 800617a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800617e:	4313      	orrs	r3, r2
 8006180:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800618e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da03      	bge.n	800619e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e001      	b.n	80061a2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff feff 	bl	8005fa6 <USB_GetHostSpeed>
 80061a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80061aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d106      	bne.n	80061c0 <USB_HC_Init+0x1c8>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d003      	beq.n	80061c0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	e001      	b.n	80061c4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061c4:	787b      	ldrb	r3, [r7, #1]
 80061c6:	059b      	lsls	r3, r3, #22
 80061c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061cc:	78bb      	ldrb	r3, [r7, #2]
 80061ce:	02db      	lsls	r3, r3, #11
 80061d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061da:	049b      	lsls	r3, r3, #18
 80061dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	0159      	lsls	r1, r3, #5
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006200:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006206:	2b03      	cmp	r3, #3
 8006208:	d003      	beq.n	8006212 <USB_HC_Init+0x21a>
 800620a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10f      	bne.n	8006232 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	440a      	add	r2, r1
 8006228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006230:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006232:	7ffb      	ldrb	r3, [r7, #31]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	; 0x30
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006258:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d02d      	beq.n	80062c2 <USB_HC_StartXfer+0x86>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	791b      	ldrb	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d129      	bne.n	80062c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d117      	bne.n	80062a4 <USB_HC_StartXfer+0x68>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	79db      	ldrb	r3, [r3, #7]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <USB_HC_StartXfer+0x48>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	79db      	ldrb	r3, [r3, #7]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d10f      	bne.n	80062a4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	440a      	add	r2, r1
 800629a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <USB_HC_StartXfer+0x86>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	795b      	ldrb	r3, [r3, #5]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa0f 	bl	80066dc <USB_DoPing>
      return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e0f8      	b.n	80064b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	8912      	ldrh	r2, [r2, #8]
 80062d2:	4413      	add	r3, r2
 80062d4:	3b01      	subs	r3, #1
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	8912      	ldrh	r2, [r2, #8]
 80062da:	fbb3 f3f2 	udiv	r3, r3, r2
 80062de:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062e2:	8b7b      	ldrh	r3, [r7, #26]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d90b      	bls.n	8006300 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062e8:	8b7b      	ldrh	r3, [r7, #26]
 80062ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	8912      	ldrh	r2, [r2, #8]
 80062f2:	fb03 f202 	mul.w	r2, r3, r2
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	611a      	str	r2, [r3, #16]
 80062fa:	e001      	b.n	8006300 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062fc:	2301      	movs	r3, #1
 80062fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	78db      	ldrb	r3, [r3, #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	8912      	ldrh	r2, [r2, #8]
 800630e:	fb03 f202 	mul.w	r2, r3, r2
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	611a      	str	r2, [r3, #16]
 8006316:	e003      	b.n	8006320 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	4b63      	ldr	r3, [pc, #396]	; (80064bc <USB_HC_StartXfer+0x280>)
 800632e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006330:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	7a9b      	ldrb	r3, [r3, #10]
 8006336:	075b      	lsls	r3, r3, #29
 8006338:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800633c:	69f9      	ldr	r1, [r7, #28]
 800633e:	0148      	lsls	r0, r1, #5
 8006340:	6a39      	ldr	r1, [r7, #32]
 8006342:	4401      	add	r1, r0
 8006344:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006348:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800634a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	68d9      	ldr	r1, [r3, #12]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	460a      	mov	r2, r1
 8006364:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	bf0c      	ite	eq
 8006376:	2301      	moveq	r3, #1
 8006378:	2300      	movne	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	440a      	add	r2, r1
 8006394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800639c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	7e7b      	ldrb	r3, [r7, #25]
 80063ae:	075b      	lsls	r3, r3, #29
 80063b0:	69f9      	ldr	r1, [r7, #28]
 80063b2:	0148      	lsls	r0, r1, #5
 80063b4:	6a39      	ldr	r1, [r7, #32]
 80063b6:	4401      	add	r1, r0
 80063b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063bc:	4313      	orrs	r3, r2
 80063be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	e003      	b.n	80063f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006406:	461a      	mov	r2, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	e04e      	b.n	80064b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d149      	bne.n	80064b2 <USB_HC_StartXfer+0x276>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d045      	beq.n	80064b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	79db      	ldrb	r3, [r3, #7]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d830      	bhi.n	8006490 <USB_HC_StartXfer+0x254>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <USB_HC_StartXfer+0x1f8>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006445 	.word	0x08006445
 8006438:	08006469 	.word	0x08006469
 800643c:	08006445 	.word	0x08006445
 8006440:	08006469 	.word	0x08006469
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	3303      	adds	r3, #3
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800644e:	8afa      	ldrh	r2, [r7, #22]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	b29b      	uxth	r3, r3
 8006456:	429a      	cmp	r2, r3
 8006458:	d91c      	bls.n	8006494 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	619a      	str	r2, [r3, #24]
        }
        break;
 8006466:	e015      	b.n	8006494 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	3303      	adds	r3, #3
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006472:	8afa      	ldrh	r2, [r7, #22]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	b29b      	uxth	r3, r3
 800647e:	429a      	cmp	r2, r3
 8006480:	d90a      	bls.n	8006498 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	619a      	str	r2, [r3, #24]
        }
        break;
 800648e:	e003      	b.n	8006498 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006490:	bf00      	nop
 8006492:	e002      	b.n	800649a <USB_HC_StartXfer+0x25e>
        break;
 8006494:	bf00      	nop
 8006496:	e000      	b.n	800649a <USB_HC_StartXfer+0x25e>
        break;
 8006498:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	785a      	ldrb	r2, [r3, #1]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2000      	movs	r0, #0
 80064aa:	9000      	str	r0, [sp, #0]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff fb31 	bl	8005b14 <USB_WritePacket>
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	; 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	1ff80000 	.word	0x1ff80000

080064c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	b29b      	uxth	r3, r3
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b089      	sub	sp, #36	; 0x24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	0c9b      	lsrs	r3, r3, #18
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	0fdb      	lsrs	r3, r3, #31
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b20      	cmp	r3, #32
 8006530:	d104      	bne.n	800653c <USB_HC_Halt+0x5a>
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e0c8      	b.n	80066ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <USB_HC_Halt+0x66>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d163      	bne.n	8006610 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	0151      	lsls	r1, r2, #5
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	440a      	add	r2, r1
 800655e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006566:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 80ab 	bne.w	80066cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d133      	bne.n	80065ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ce:	d81d      	bhi.n	800660c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e6:	d0ec      	beq.n	80065c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065e8:	e070      	b.n	80066cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006608:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800660a:	e05f      	b.n	80066cc <USB_HC_Halt+0x1ea>
            break;
 800660c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800660e:	e05d      	b.n	80066cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800662e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d133      	bne.n	80066a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800665e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800668c:	d81d      	bhi.n	80066ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a4:	d0ec      	beq.n	8006680 <USB_HC_Halt+0x19e>
 80066a6:	e011      	b.n	80066cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e000      	b.n	80066cc <USB_HC_Halt+0x1ea>
          break;
 80066ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	04da      	lsls	r2, r3, #19
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <USB_DoPing+0x74>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	440a      	add	r2, r1
 8006704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006724:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	1ff80000 	.word	0x1ff80000

08006754 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff f911 	bl	8005990 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800676e:	2110      	movs	r1, #16
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff f96b 	bl	8005a4c <USB_FlushTxFifo>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff f997 	bl	8005ab4 <USB_FlushRxFifo>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	e01f      	b.n	80067d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ca:	461a      	mov	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d9dc      	bls.n	8006796 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e034      	b.n	800684c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006800:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006808:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	461a      	mov	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006828:	d80c      	bhi.n	8006844 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006840:	d0ec      	beq.n	800681c <USB_StopHost+0xc8>
 8006842:	e000      	b.n	8006846 <USB_StopHost+0xf2>
        break;
 8006844:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	3301      	adds	r3, #1
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2b0f      	cmp	r3, #15
 8006850:	d9c7      	bls.n	80067e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006858:	461a      	mov	r2, r3
 800685a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800685e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006866:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff f880 	bl	800596e <USB_EnableGlobalInt>

  return ret;
 800686e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af04      	add	r7, sp, #16
 800687e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006880:	2301      	movs	r3, #1
 8006882:	2202      	movs	r2, #2
 8006884:	2102      	movs	r1, #2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fc66 	bl	8007158 <USBH_FindInterface>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2bff      	cmp	r3, #255	; 0xff
 8006894:	d002      	beq.n	800689c <USBH_CDC_InterfaceInit+0x24>
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d901      	bls.n	80068a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	e13d      	b.n	8006b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fc3b 	bl	8007120 <USBH_SelectInterface>
 80068aa:	4603      	mov	r3, r0
 80068ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e131      	b.n	8006b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068be:	2050      	movs	r0, #80	; 0x50
 80068c0:	f002 fafa 	bl	8008eb8 <malloc>
 80068c4:	4603      	mov	r3, r0
 80068c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	e11f      	b.n	8006b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068dc:	2250      	movs	r2, #80	; 0x50
 80068de:	2100      	movs	r1, #0
 80068e0:	68b8      	ldr	r0, [r7, #8]
 80068e2:	f002 faf9 	bl	8008ed8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	211a      	movs	r1, #26
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b25b      	sxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da15      	bge.n	800692a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	211a      	movs	r1, #26
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	4413      	add	r3, r2
 800690a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	211a      	movs	r1, #26
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 ff2c 	bl	800878e <USBH_AllocPipe>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7819      	ldrb	r1, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	7858      	ldrb	r0, [r3, #1]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	8952      	ldrh	r2, [r2, #10]
 8006956:	9202      	str	r2, [sp, #8]
 8006958:	2203      	movs	r2, #3
 800695a:	9201      	str	r2, [sp, #4]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	4623      	mov	r3, r4
 8006960:	4602      	mov	r2, r0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fee4 	bl	8008730 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2200      	movs	r2, #0
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f002 f9f3 	bl	8008d5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006976:	2300      	movs	r3, #0
 8006978:	2200      	movs	r2, #0
 800697a:	210a      	movs	r1, #10
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fbeb 	bl	8007158 <USBH_FindInterface>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2bff      	cmp	r3, #255	; 0xff
 800698a:	d002      	beq.n	8006992 <USBH_CDC_InterfaceInit+0x11a>
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d901      	bls.n	8006996 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006992:	2302      	movs	r3, #2
 8006994:	e0c2      	b.n	8006b1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	211a      	movs	r1, #26
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da16      	bge.n	80069dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	211a      	movs	r1, #26
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	211a      	movs	r1, #26
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069d4:	881a      	ldrh	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	835a      	strh	r2, [r3, #26]
 80069da:	e015      	b.n	8006a08 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	211a      	movs	r1, #26
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	211a      	movs	r1, #26
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	211a      	movs	r1, #26
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	da16      	bge.n	8006a4e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	211a      	movs	r1, #26
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	211a      	movs	r1, #26
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	835a      	strh	r2, [r3, #26]
 8006a4c:	e015      	b.n	8006a7a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	211a      	movs	r1, #26
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	4413      	add	r3, r2
 8006a5a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	211a      	movs	r1, #26
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7b9b      	ldrb	r3, [r3, #14]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fe84 	bl	800878e <USBH_AllocPipe>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	7bdb      	ldrb	r3, [r3, #15]
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 fe7a 	bl	800878e <USBH_AllocPipe>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	7b59      	ldrb	r1, [r3, #13]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	7b98      	ldrb	r0, [r3, #14]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	8b12      	ldrh	r2, [r2, #24]
 8006aba:	9202      	str	r2, [sp, #8]
 8006abc:	2202      	movs	r2, #2
 8006abe:	9201      	str	r2, [sp, #4]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 fe32 	bl	8008730 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	7b19      	ldrb	r1, [r3, #12]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	7bd8      	ldrb	r0, [r3, #15]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	8b52      	ldrh	r2, [r2, #26]
 8006ae4:	9202      	str	r2, [sp, #8]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	9201      	str	r2, [sp, #4]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	4623      	mov	r3, r4
 8006aee:	4602      	mov	r2, r0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fe1d 	bl	8008730 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	7b5b      	ldrb	r3, [r3, #13]
 8006b02:	2200      	movs	r2, #0
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f002 f928 	bl	8008d5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	7b1b      	ldrb	r3, [r3, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 f921 	bl	8008d5c <USBH_LL_SetToggle>

  return USBH_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}

08006b24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fe12 	bl	800876e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fe3d 	bl	80087d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	7b1b      	ldrb	r3, [r3, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	7b1b      	ldrb	r3, [r3, #12]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fdff 	bl	800876e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	7b1b      	ldrb	r3, [r3, #12]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fe2a 	bl	80087d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	7b5b      	ldrb	r3, [r3, #13]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	7b5b      	ldrb	r3, [r3, #13]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 fdec 	bl	800876e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	7b5b      	ldrb	r3, [r3, #13]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fe17 	bl	80087d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f983 	bl	8008ec8 <free>
    phost->pActiveClass->pData = 0U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3340      	adds	r3, #64	; 0x40
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8b1 	bl	8006d56 <GetLineCoding>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bf8:	7afb      	ldrb	r3, [r7, #11]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c04:	2102      	movs	r1, #2
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d877      	bhi.n	8006d28 <USBH_CDC_Process+0x114>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <USBH_CDC_Process+0x2c>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c5b 	.word	0x08006c5b
 8006c48:	08006c8b 	.word	0x08006c8b
 8006c4c:	08006cff 	.word	0x08006cff
 8006c50:	08006d0d 	.word	0x08006d0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
      break;
 8006c58:	e06d      	b.n	8006d36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f897 	bl	8006d94 <SetLineCoding>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c78:	e058      	b.n	8006d2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d055      	beq.n	8006d2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2204      	movs	r2, #4
 8006c84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c88:	e050      	b.n	8006d2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3340      	adds	r3, #64	; 0x40
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f860 	bl	8006d56 <GetLineCoding>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d126      	bne.n	8006cee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb2:	791b      	ldrb	r3, [r3, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d13b      	bne.n	8006d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d133      	bne.n	8006d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d12b      	bne.n	8006d30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d124      	bne.n	8006d30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f958 	bl	8006f9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cec:	e020      	b.n	8006d30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d01d      	beq.n	8006d30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cfc:	e018      	b.n	8006d30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f867 	bl	8006dd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8da 	bl	8006ebe <CDC_ProcessReception>
      break;
 8006d0a:	e014      	b.n	8006d36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ffef 	bl	8007cf2 <USBH_ClrFeature>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d26:	e005      	b.n	8006d34 <USBH_CDC_Process+0x120>

    default:
      break;
 8006d28:	bf00      	nop
 8006d2a:	e004      	b.n	8006d36 <USBH_CDC_Process+0x122>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e002      	b.n	8006d36 <USBH_CDC_Process+0x122>
      break;
 8006d30:	bf00      	nop
 8006d32:	e000      	b.n	8006d36 <USBH_CDC_Process+0x122>
      break;
 8006d34:	bf00      	nop

  }

  return status;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	22a1      	movs	r2, #161	; 0xa1
 8006d64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2221      	movs	r2, #33	; 0x21
 8006d6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2207      	movs	r2, #7
 8006d7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2207      	movs	r2, #7
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fa81 	bl	800828c <USBH_CtlReq>
 8006d8a:	4603      	mov	r3, r0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2207      	movs	r2, #7
 8006dba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2207      	movs	r2, #7
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fa62 	bl	800828c <USBH_CtlReq>
 8006dc8:	4603      	mov	r3, r0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af02      	add	r7, sp, #8
 8006dd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006de4:	2300      	movs	r3, #0
 8006de6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d002      	beq.n	8006df8 <CDC_ProcessTransmission+0x26>
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d023      	beq.n	8006e3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006df6:	e05e      	b.n	8006eb6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	8b12      	ldrh	r2, [r2, #24]
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d90b      	bls.n	8006e1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	69d9      	ldr	r1, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8b1a      	ldrh	r2, [r3, #24]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	7b5b      	ldrb	r3, [r3, #13]
 8006e10:	2001      	movs	r0, #1
 8006e12:	9000      	str	r0, [sp, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 fc48 	bl	80086aa <USBH_BulkSendData>
 8006e1a:	e00b      	b.n	8006e34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	7b5b      	ldrb	r3, [r3, #13]
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	9000      	str	r0, [sp, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fc3b 	bl	80086aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e3c:	e03b      	b.n	8006eb6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	7b5b      	ldrb	r3, [r3, #13]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 ff5f 	bl	8008d08 <USBH_LL_GetURBState>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e4e:	7afb      	ldrb	r3, [r7, #11]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d128      	bne.n	8006ea6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	8b12      	ldrh	r2, [r2, #24]
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d90e      	bls.n	8006e7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	8b12      	ldrh	r2, [r2, #24]
 8006e68:	1a9a      	subs	r2, r3, r2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	8b12      	ldrh	r2, [r2, #24]
 8006e76:	441a      	add	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	61da      	str	r2, [r3, #28]
 8006e7c:	e002      	b.n	8006e84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e94:	e00e      	b.n	8006eb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f868 	bl	8006f74 <USBH_CDC_TransmitCallback>
      break;
 8006ea4:	e006      	b.n	8006eb4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d103      	bne.n	8006eb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006eb4:	bf00      	nop
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d002      	beq.n	8006ee4 <CDC_ProcessReception+0x26>
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d00e      	beq.n	8006f00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ee2:	e043      	b.n	8006f6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6a19      	ldr	r1, [r3, #32]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	8b5a      	ldrh	r2, [r3, #26]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	7b1b      	ldrb	r3, [r3, #12]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fbff 	bl	80086f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006efe:	e035      	b.n	8006f6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	7b1b      	ldrb	r3, [r3, #12]
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fefe 	bl	8008d08 <USBH_LL_GetURBState>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f10:	7cfb      	ldrb	r3, [r7, #19]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d129      	bne.n	8006f6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	7b1b      	ldrb	r3, [r3, #12]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fe61 	bl	8008be4 <USBH_LL_GetLastXferSize>
 8006f22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d016      	beq.n	8006f5c <CDC_ProcessReception+0x9e>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	8b5b      	ldrh	r3, [r3, #26]
 8006f32:	461a      	mov	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d910      	bls.n	8006f5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2203      	movs	r2, #3
 8006f56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f5a:	e006      	b.n	8006f6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f80f 	bl	8006f88 <USBH_CDC_ReceiveCallback>
      break;
 8006f6a:	bf00      	nop
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e029      	b.n	800701c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	79fa      	ldrb	r2, [r7, #7]
 8006fcc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f81f 	bl	8007024 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fd31 	bl	8008a7c <USBH_LL_Init>

  return USBH_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e009      	b.n	800704a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	33e0      	adds	r3, #224	; 0xe0
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	2200      	movs	r2, #0
 8007042:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b0f      	cmp	r3, #15
 800704e:	d9f2      	bls.n	8007036 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	e009      	b.n	800706a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007070:	d3f1      	bcc.n	8007056 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2240      	movs	r2, #64	; 0x40
 8007096:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d016      	beq.n	800710e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10e      	bne.n	8007108 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	33de      	adds	r3, #222	; 0xde
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
 8007106:	e004      	b.n	8007112 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007108:	2302      	movs	r3, #2
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e001      	b.n	8007112 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	429a      	cmp	r2, r3
 800713a:	d204      	bcs.n	8007146 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	78fa      	ldrb	r2, [r7, #3]
 8007140:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007144:	e001      	b.n	800714a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007146:	2302      	movs	r3, #2
 8007148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4603      	mov	r3, r0
 8007168:	70fb      	strb	r3, [r7, #3]
 800716a:	460b      	mov	r3, r1
 800716c:	70bb      	strb	r3, [r7, #2]
 800716e:	4613      	mov	r3, r2
 8007170:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007180:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007182:	e025      	b.n	80071d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	221a      	movs	r2, #26
 8007188:	fb02 f303 	mul.w	r3, r2, r3
 800718c:	3308      	adds	r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	3302      	adds	r3, #2
 8007194:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	795b      	ldrb	r3, [r3, #5]
 800719a:	78fa      	ldrb	r2, [r7, #3]
 800719c:	429a      	cmp	r2, r3
 800719e:	d002      	beq.n	80071a6 <USBH_FindInterface+0x4e>
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	2bff      	cmp	r3, #255	; 0xff
 80071a4:	d111      	bne.n	80071ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071aa:	78ba      	ldrb	r2, [r7, #2]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d002      	beq.n	80071b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071b0:	78bb      	ldrb	r3, [r7, #2]
 80071b2:	2bff      	cmp	r3, #255	; 0xff
 80071b4:	d109      	bne.n	80071ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ba:	787a      	ldrb	r2, [r7, #1]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d002      	beq.n	80071c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071c0:	787b      	ldrb	r3, [r7, #1]
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d101      	bne.n	80071ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	e006      	b.n	80071d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	3301      	adds	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d9d6      	bls.n	8007184 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071d6:	23ff      	movs	r3, #255	; 0xff
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fc81 	bl	8008af4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071f2:	2101      	movs	r1, #1
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fd9a 	bl	8008d2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af04      	add	r7, sp, #16
 800720a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2203      	movs	r2, #3
 8007224:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b0b      	cmp	r3, #11
 800722e:	f200 81be 	bhi.w	80075ae <USBH_Process+0x3aa>
 8007232:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBH_Process+0x34>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	08007269 	.word	0x08007269
 800723c:	0800729b 	.word	0x0800729b
 8007240:	08007303 	.word	0x08007303
 8007244:	08007549 	.word	0x08007549
 8007248:	080075af 	.word	0x080075af
 800724c:	080073a7 	.word	0x080073a7
 8007250:	080074ef 	.word	0x080074ef
 8007254:	080073dd 	.word	0x080073dd
 8007258:	080073fd 	.word	0x080073fd
 800725c:	0800741d 	.word	0x0800741d
 8007260:	08007461 	.word	0x08007461
 8007264:	08007531 	.word	0x08007531
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 819e 	beq.w	80075b2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800727c:	20c8      	movs	r0, #200	; 0xc8
 800727e:	f001 fd9d 	bl	8008dbc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fc93 	bl	8008bae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007298:	e18b      	b.n	80075b2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072b2:	e18d      	b.n	80075d0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072be:	d914      	bls.n	80072ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072c6:	3301      	adds	r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d903      	bls.n	80072e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	220d      	movs	r2, #13
 80072de:	701a      	strb	r2, [r3, #0]
      break;
 80072e0:	e176      	b.n	80075d0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
      break;
 80072e8:	e172      	b.n	80075d0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072f0:	f103 020a 	add.w	r2, r3, #10
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072fa:	200a      	movs	r0, #10
 80072fc:	f001 fd5e 	bl	8008dbc <USBH_Delay>
      break;
 8007300:	e166      	b.n	80075d0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007312:	2104      	movs	r1, #4
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007318:	2064      	movs	r0, #100	; 0x64
 800731a:	f001 fd4f 	bl	8008dbc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fc1e 	bl	8008b60 <USBH_LL_GetSpeed>
 8007324:	4603      	mov	r3, r0
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2205      	movs	r2, #5
 8007332:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fa29 	bl	800878e <USBH_AllocPipe>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007344:	2180      	movs	r1, #128	; 0x80
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fa21 	bl	800878e <USBH_AllocPipe>
 800734c:	4603      	mov	r3, r0
 800734e:	461a      	mov	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	7919      	ldrb	r1, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007368:	b292      	uxth	r2, r2
 800736a:	9202      	str	r2, [sp, #8]
 800736c:	2200      	movs	r2, #0
 800736e:	9201      	str	r2, [sp, #4]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4603      	mov	r3, r0
 8007374:	2280      	movs	r2, #128	; 0x80
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 f9da 	bl	8008730 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7959      	ldrb	r1, [r3, #5]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007390:	b292      	uxth	r2, r2
 8007392:	9202      	str	r2, [sp, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	9201      	str	r2, [sp, #4]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	4603      	mov	r3, r0
 800739c:	2200      	movs	r2, #0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f9c6 	bl	8008730 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073a4:	e114      	b.n	80075d0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f918 	bl	80075dc <USBH_HandleEnum>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 80fe 	bne.w	80075b6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d103      	bne.n	80073d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2208      	movs	r2, #8
 80073d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073d2:	e0f0      	b.n	80075b6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2207      	movs	r2, #7
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e0ec      	b.n	80075b6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80e9 	beq.w	80075ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ee:	2101      	movs	r1, #1
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2208      	movs	r2, #8
 80073f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073fa:	e0de      	b.n	80075ba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007402:	b29b      	uxth	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc2c 	bl	8007c64 <USBH_SetCfg>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 80d5 	bne.w	80075be <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2209      	movs	r2, #9
 8007418:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800741a:	e0d0      	b.n	80075be <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d016      	beq.n	8007458 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800742a:	2101      	movs	r1, #1
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc3c 	bl	8007caa <USBH_SetFeature>
 8007432:	4603      	mov	r3, r0
 8007434:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	220a      	movs	r2, #10
 8007442:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007444:	e0bd      	b.n	80075c2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b03      	cmp	r3, #3
 800744c:	f040 80b9 	bne.w	80075c2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	220a      	movs	r2, #10
 8007454:	701a      	strb	r2, [r3, #0]
      break;
 8007456:	e0b4      	b.n	80075c2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	220a      	movs	r2, #10
 800745c:	701a      	strb	r2, [r3, #0]
      break;
 800745e:	e0b0      	b.n	80075c2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 80ad 	beq.w	80075c6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	e016      	b.n	80074a8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	32de      	adds	r2, #222	; 0xde
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	791a      	ldrb	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800748c:	429a      	cmp	r2, r3
 800748e:	d108      	bne.n	80074a2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32de      	adds	r2, #222	; 0xde
 8007496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074a0:	e005      	b.n	80074ae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	3301      	adds	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0e5      	beq.n	800747a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d016      	beq.n	80074e6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2206      	movs	r2, #6
 80074ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d6:	2103      	movs	r1, #3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074dc:	e073      	b.n	80075c6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	220d      	movs	r2, #13
 80074e2:	701a      	strb	r2, [r3, #0]
      break;
 80074e4:	e06f      	b.n	80075c6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220d      	movs	r2, #13
 80074ea:	701a      	strb	r2, [r3, #0]
      break;
 80074ec:	e06b      	b.n	80075c6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d017      	beq.n	8007528 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	220b      	movs	r2, #11
 8007514:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007516:	e058      	b.n	80075ca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d154      	bne.n	80075ca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	220d      	movs	r2, #13
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	e050      	b.n	80075ca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220d      	movs	r2, #13
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e04c      	b.n	80075ca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d049      	beq.n	80075ce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      }
      break;
 8007546:	e042      	b.n	80075ce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fd67 	bl	8007024 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007584:	2105      	movs	r1, #5
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	d107      	bne.n	80075a6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fe20 	bl	80071e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075a4:	e014      	b.n	80075d0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 faa4 	bl	8008af4 <USBH_LL_Start>
      break;
 80075ac:	e010      	b.n	80075d0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80075ae:	bf00      	nop
 80075b0:	e00e      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075b2:	bf00      	nop
 80075b4:	e00c      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075b6:	bf00      	nop
 80075b8:	e00a      	b.n	80075d0 <USBH_Process+0x3cc>
    break;
 80075ba:	bf00      	nop
 80075bc:	e008      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075be:	bf00      	nop
 80075c0:	e006      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075c2:	bf00      	nop
 80075c4:	e004      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <USBH_Process+0x3cc>
      break;
 80075ce:	bf00      	nop
  }
  return USBH_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop

080075dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af04      	add	r7, sp, #16
 80075e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	f200 81c1 	bhi.w	8007978 <USBH_HandleEnum+0x39c>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USBH_HandleEnum+0x20>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	080076db 	.word	0x080076db
 8007604:	08007745 	.word	0x08007745
 8007608:	080077d3 	.word	0x080077d3
 800760c:	0800783d 	.word	0x0800783d
 8007610:	080078ad 	.word	0x080078ad
 8007614:	080078f3 	.word	0x080078f3
 8007618:	08007939 	.word	0x08007939
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800761c:	2108      	movs	r1, #8
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa50 	bl	8007ac4 <USBH_Get_DevDesc>
 8007624:	4603      	mov	r3, r0
 8007626:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d130      	bne.n	8007690 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	7919      	ldrb	r1, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007652:	b292      	uxth	r2, r2
 8007654:	9202      	str	r2, [sp, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4603      	mov	r3, r0
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 f865 	bl	8008730 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7959      	ldrb	r1, [r3, #5]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800767a:	b292      	uxth	r2, r2
 800767c:	9202      	str	r2, [sp, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	4603      	mov	r3, r0
 8007686:	2200      	movs	r2, #0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 f851 	bl	8008730 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800768e:	e175      	b.n	800797c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	2b03      	cmp	r3, #3
 8007694:	f040 8172 	bne.w	800797c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769e:	3301      	adds	r3, #1
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d903      	bls.n	80076ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	220d      	movs	r2, #13
 80076b6:	701a      	strb	r2, [r3, #0]
      break;
 80076b8:	e160      	b.n	800797c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	795b      	ldrb	r3, [r3, #5]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f885 	bl	80087d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	791b      	ldrb	r3, [r3, #4]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 f87f 	bl	80087d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
      break;
 80076d8:	e150      	b.n	800797c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076da:	2112      	movs	r1, #18
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9f1 	bl	8007ac4 <USBH_Get_DevDesc>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076f2:	e145      	b.n	8007980 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	f040 8142 	bne.w	8007980 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007702:	3301      	adds	r3, #1
 8007704:	b2da      	uxtb	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007712:	2b03      	cmp	r3, #3
 8007714:	d903      	bls.n	800771e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	220d      	movs	r2, #13
 800771a:	701a      	strb	r2, [r3, #0]
      break;
 800771c:	e130      	b.n	8007980 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f853 	bl	80087d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	791b      	ldrb	r3, [r3, #4]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f84d 	bl	80087d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
      break;
 8007742:	e11d      	b.n	8007980 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa68 	bl	8007c1c <USBH_SetAddress>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d132      	bne.n	80077bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007756:	2002      	movs	r0, #2
 8007758:	f001 fb30 	bl	8008dbc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2203      	movs	r2, #3
 8007768:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7919      	ldrb	r1, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800777e:	b292      	uxth	r2, r2
 8007780:	9202      	str	r2, [sp, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	9201      	str	r2, [sp, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	4603      	mov	r3, r0
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ffcf 	bl	8008730 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7959      	ldrb	r1, [r3, #5]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077a6:	b292      	uxth	r2, r2
 80077a8:	9202      	str	r2, [sp, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	9201      	str	r2, [sp, #4]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	2200      	movs	r2, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ffbb 	bl	8008730 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077ba:	e0e3      	b.n	8007984 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	f040 80e0 	bne.w	8007984 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	220d      	movs	r2, #13
 80077c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	705a      	strb	r2, [r3, #1]
      break;
 80077d0:	e0d8      	b.n	8007984 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077d2:	2109      	movs	r1, #9
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f99d 	bl	8007b14 <USBH_Get_CfgDesc>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2204      	movs	r2, #4
 80077e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077ea:	e0cd      	b.n	8007988 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	f040 80ca 	bne.w	8007988 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077fa:	3301      	adds	r3, #1
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800780a:	2b03      	cmp	r3, #3
 800780c:	d903      	bls.n	8007816 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	220d      	movs	r2, #13
 8007812:	701a      	strb	r2, [r3, #0]
      break;
 8007814:	e0b8      	b.n	8007988 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	795b      	ldrb	r3, [r3, #5]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 ffd7 	bl	80087d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	791b      	ldrb	r3, [r3, #4]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 ffd1 	bl	80087d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]
      break;
 800783a:	e0a5      	b.n	8007988 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f965 	bl	8007b14 <USBH_Get_CfgDesc>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800785a:	e097      	b.n	800798c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b03      	cmp	r3, #3
 8007860:	f040 8094 	bne.w	800798c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786a:	3301      	adds	r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800787a:	2b03      	cmp	r3, #3
 800787c:	d903      	bls.n	8007886 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220d      	movs	r2, #13
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e082      	b.n	800798c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	795b      	ldrb	r3, [r3, #5]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 ff9f 	bl	80087d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 ff99 	bl	80087d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
      break;
 80078aa:	e06f      	b.n	800798c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d019      	beq.n	80078ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078c2:	23ff      	movs	r3, #255	; 0xff
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f949 	bl	8007b5c <USBH_Get_StringDesc>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2206      	movs	r2, #6
 80078d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078da:	e059      	b.n	8007990 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d156      	bne.n	8007990 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2206      	movs	r2, #6
 80078e6:	705a      	strb	r2, [r3, #1]
      break;
 80078e8:	e052      	b.n	8007990 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2206      	movs	r2, #6
 80078ee:	705a      	strb	r2, [r3, #1]
      break;
 80078f0:	e04e      	b.n	8007990 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d019      	beq.n	8007930 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007908:	23ff      	movs	r3, #255	; 0xff
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f926 	bl	8007b5c <USBH_Get_StringDesc>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2207      	movs	r2, #7
 800791e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007920:	e038      	b.n	8007994 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b03      	cmp	r3, #3
 8007926:	d135      	bne.n	8007994 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2207      	movs	r2, #7
 800792c:	705a      	strb	r2, [r3, #1]
      break;
 800792e:	e031      	b.n	8007994 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2207      	movs	r2, #7
 8007934:	705a      	strb	r2, [r3, #1]
      break;
 8007936:	e02d      	b.n	8007994 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800793e:	2b00      	cmp	r3, #0
 8007940:	d017      	beq.n	8007972 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800794e:	23ff      	movs	r3, #255	; 0xff
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f903 	bl	8007b5c <USBH_Get_StringDesc>
 8007956:	4603      	mov	r3, r0
 8007958:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007964:	e018      	b.n	8007998 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d115      	bne.n	8007998 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
      break;
 8007970:	e012      	b.n	8007998 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
      break;
 8007976:	e00f      	b.n	8007998 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007978:	bf00      	nop
 800797a:	e00e      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 800797c:	bf00      	nop
 800797e:	e00c      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007980:	bf00      	nop
 8007982:	e00a      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007984:	bf00      	nop
 8007986:	e008      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007988:	bf00      	nop
 800798a:	e006      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 800798c:	bf00      	nop
 800798e:	e004      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007990:	bf00      	nop
 8007992:	e002      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <USBH_HandleEnum+0x3be>
      break;
 8007998:	bf00      	nop
  }
  return Status;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f804 	bl	80079e6 <USBH_HandleSof>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b0b      	cmp	r3, #11
 80079f6:	d10a      	bne.n	8007a0e <USBH_HandleSof+0x28>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007a26:	bf00      	nop
}
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a42:	bf00      	nop
}
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f844 	bl	8008b2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	791b      	ldrb	r3, [r3, #4]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fe91 	bl	80087d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fe8b 	bl	80087d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f864 	bl	8007bb2 <USBH_GetDescriptor>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	b292      	uxth	r2, r2
 8007b04:	4619      	mov	r1, r3
 8007b06:	f000 f918 	bl	8007d3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	331c      	adds	r3, #28
 8007b24:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b26:	887b      	ldrh	r3, [r7, #2]
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f83d 	bl	8007bb2 <USBH_GetDescriptor>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d107      	bne.n	8007b52 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b42:	887b      	ldrh	r3, [r7, #2]
 8007b44:	461a      	mov	r2, r3
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f987 	bl	8007e5c <USBH_ParseCfgDesc>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	461a      	mov	r2, r3
 8007b68:	460b      	mov	r3, r1
 8007b6a:	72fb      	strb	r3, [r7, #11]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b78:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b80:	893b      	ldrh	r3, [r7, #8]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	460b      	mov	r3, r1
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f812 	bl	8007bb2 <USBH_GetDescriptor>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d107      	bne.n	8007ba8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b9e:	893a      	ldrh	r2, [r7, #8]
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fb24 	bl	80081f0 <USBH_ParseStringDesc>
  }

  return status;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	72fb      	strb	r3, [r7, #11]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d11c      	bne.n	8007c06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2206      	movs	r2, #6
 8007bdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	893a      	ldrh	r2, [r7, #8]
 8007be2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007be4:	893b      	ldrh	r3, [r7, #8]
 8007be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bee:	d104      	bne.n	8007bfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f240 4209 	movw	r2, #1033	; 0x409
 8007bf6:	829a      	strh	r2, [r3, #20]
 8007bf8:	e002      	b.n	8007c00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8b3a      	ldrh	r2, [r7, #24]
 8007c04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c06:	8b3b      	ldrh	r3, [r7, #24]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fb3d 	bl	800828c <USBH_CtlReq>
 8007c12:	4603      	mov	r3, r0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	789b      	ldrb	r3, [r3, #2]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10f      	bne.n	8007c50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2205      	movs	r2, #5
 8007c3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c50:	2200      	movs	r2, #0
 8007c52:	2100      	movs	r1, #0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fb19 	bl	800828c <USBH_CtlReq>
 8007c5a:	4603      	mov	r3, r0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	789b      	ldrb	r3, [r3, #2]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10e      	bne.n	8007c96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2209      	movs	r2, #9
 8007c82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 faf6 	bl	800828c <USBH_CtlReq>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10f      	bne.n	8007cde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fad2 	bl	800828c <USBH_CtlReq>
 8007ce8:	4603      	mov	r3, r0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	789b      	ldrb	r3, [r3, #2]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d10f      	bne.n	8007d26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 faae 	bl	800828c <USBH_CtlReq>
 8007d30:	4603      	mov	r3, r0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	4613      	mov	r3, r2
 8007d46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	785a      	ldrb	r2, [r3, #1]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3302      	adds	r3, #2
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3303      	adds	r3, #3
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	791a      	ldrb	r2, [r3, #4]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	795a      	ldrb	r2, [r3, #5]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	799a      	ldrb	r2, [r3, #6]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	79da      	ldrb	r2, [r3, #7]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	79db      	ldrb	r3, [r3, #7]
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	dc11      	bgt.n	8007dc0 <USBH_ParseDevDesc+0x86>
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	db16      	blt.n	8007dce <USBH_ParseDevDesc+0x94>
 8007da0:	3b08      	subs	r3, #8
 8007da2:	2201      	movs	r2, #1
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf14      	ite	ne
 8007db4:	2301      	movne	r3, #1
 8007db6:	2300      	moveq	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <USBH_ParseDevDesc+0x8a>
 8007dbe:	e006      	b.n	8007dce <USBH_ParseDevDesc+0x94>
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d104      	bne.n	8007dce <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	79da      	ldrb	r2, [r3, #7]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	71da      	strb	r2, [r3, #7]
      break;
 8007dcc:	e003      	b.n	8007dd6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2240      	movs	r2, #64	; 0x40
 8007dd2:	71da      	strb	r2, [r3, #7]
      break;
 8007dd4:	bf00      	nop
  }

  if (length > 8U)
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d939      	bls.n	8007e50 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3308      	adds	r3, #8
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3309      	adds	r3, #9
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	330a      	adds	r3, #10
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	330b      	adds	r3, #11
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	330c      	adds	r3, #12
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	330d      	adds	r3, #13
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	7b9a      	ldrb	r2, [r3, #14]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7bda      	ldrb	r2, [r3, #15]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7c1a      	ldrb	r2, [r3, #16]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7c5a      	ldrb	r2, [r3, #17]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	745a      	strb	r2, [r3, #17]
  }
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08c      	sub	sp, #48	; 0x30
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	781a      	ldrb	r2, [r3, #0]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	785a      	ldrb	r2, [r3, #1]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3303      	adds	r3, #3
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	bf28      	it	cs
 8007eba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	791a      	ldrb	r2, [r3, #4]
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	795a      	ldrb	r2, [r3, #5]
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	799a      	ldrb	r2, [r3, #6]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	79da      	ldrb	r2, [r3, #7]
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	7a1a      	ldrb	r2, [r3, #8]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b09      	cmp	r3, #9
 8007ef2:	d002      	beq.n	8007efa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	2209      	movs	r2, #9
 8007ef8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	f240 809d 	bls.w	800803c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f02:	2309      	movs	r3, #9
 8007f04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f0a:	e081      	b.n	8008010 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f0c:	f107 0316 	add.w	r3, r7, #22
 8007f10:	4619      	mov	r1, r3
 8007f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f14:	f000 f99f 	bl	8008256 <USBH_GetNextDesc>
 8007f18:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d176      	bne.n	8008010 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d002      	beq.n	8007f30 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	2209      	movs	r2, #9
 8007f2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f34:	221a      	movs	r2, #26
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	6a3a      	ldr	r2, [r7, #32]
 8007f3e:	4413      	add	r3, r2
 8007f40:	3302      	adds	r3, #2
 8007f42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f46:	69f8      	ldr	r0, [r7, #28]
 8007f48:	f000 f87e 	bl	8008048 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f56:	e043      	b.n	8007fe0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f58:	f107 0316 	add.w	r3, r7, #22
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f60:	f000 f979 	bl	8008256 <USBH_GetNextDesc>
 8007f64:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d138      	bne.n	8007fe0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d10f      	bne.n	8007f96 <USBH_ParseCfgDesc+0x13a>
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d10b      	bne.n	8007f96 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	79db      	ldrb	r3, [r3, #7]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10f      	bne.n	8007fa6 <USBH_ParseCfgDesc+0x14a>
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d00b      	beq.n	8007fa6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	2209      	movs	r2, #9
 8007f92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f94:	e007      	b.n	8007fa6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b07      	cmp	r3, #7
 8007f9c:	d004      	beq.n	8007fa8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e000      	b.n	8007fa8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fa6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fb0:	3201      	adds	r2, #1
 8007fb2:	00d2      	lsls	r2, r2, #3
 8007fb4:	211a      	movs	r1, #26
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc8:	69b9      	ldr	r1, [r7, #24]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f86b 	bl	80080a6 <USBH_ParseEPDesc>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fda:	3301      	adds	r3, #1
 8007fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d204      	bcs.n	8007ff6 <USBH_ParseCfgDesc+0x19a>
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	885a      	ldrh	r2, [r3, #2]
 8007ff0:	8afb      	ldrh	r3, [r7, #22]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8b0      	bhi.n	8007f58 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	791b      	ldrb	r3, [r3, #4]
 8007ffa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d201      	bcs.n	8008006 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008002:	2303      	movs	r3, #3
 8008004:	e01c      	b.n	8008040 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800800a:	3301      	adds	r3, #1
 800800c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008014:	2b01      	cmp	r3, #1
 8008016:	d805      	bhi.n	8008024 <USBH_ParseCfgDesc+0x1c8>
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	885a      	ldrh	r2, [r3, #2]
 800801c:	8afb      	ldrh	r3, [r7, #22]
 800801e:	429a      	cmp	r2, r3
 8008020:	f63f af74 	bhi.w	8007f0c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	791b      	ldrb	r3, [r3, #4]
 8008028:	2b02      	cmp	r3, #2
 800802a:	bf28      	it	cs
 800802c:	2302      	movcs	r3, #2
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008034:	429a      	cmp	r2, r3
 8008036:	d201      	bcs.n	800803c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008038:	2303      	movs	r3, #3
 800803a:	e001      	b.n	8008040 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800803c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008040:	4618      	mov	r0, r3
 8008042:	3730      	adds	r7, #48	; 0x30
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	785a      	ldrb	r2, [r3, #1]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	789a      	ldrb	r2, [r3, #2]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	78da      	ldrb	r2, [r3, #3]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	791a      	ldrb	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	795a      	ldrb	r2, [r3, #5]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	799a      	ldrb	r2, [r3, #6]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	79da      	ldrb	r2, [r3, #7]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	7a1a      	ldrb	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	721a      	strb	r2, [r3, #8]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b087      	sub	sp, #28
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	785a      	ldrb	r2, [r3, #1]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	789a      	ldrb	r2, [r3, #2]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	78da      	ldrb	r2, [r3, #3]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3304      	adds	r3, #4
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3305      	adds	r3, #5
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	799a      	ldrb	r2, [r3, #6]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	889b      	ldrh	r3, [r3, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d102      	bne.n	8008108 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008102:	2303      	movs	r3, #3
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	e033      	b.n	8008170 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	889b      	ldrh	r3, [r3, #4]
 800810c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008110:	f023 0307 	bic.w	r3, r3, #7
 8008114:	b29a      	uxth	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	889b      	ldrh	r3, [r3, #4]
 800811e:	b21a      	sxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b299      	uxth	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3305      	adds	r3, #5
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	b29b      	uxth	r3, r3
 8008134:	430b      	orrs	r3, r1
 8008136:	b29b      	uxth	r3, r3
 8008138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800813c:	2b00      	cmp	r3, #0
 800813e:	d110      	bne.n	8008162 <USBH_ParseEPDesc+0xbc>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3304      	adds	r3, #4
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b299      	uxth	r1, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3305      	adds	r3, #5
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	430b      	orrs	r3, r1
 8008156:	b29b      	uxth	r3, r3
 8008158:	b21b      	sxth	r3, r3
 800815a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800815e:	b21b      	sxth	r3, r3
 8008160:	e001      	b.n	8008166 <USBH_ParseEPDesc+0xc0>
 8008162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008166:	4313      	orrs	r3, r2
 8008168:	b21b      	sxth	r3, r3
 800816a:	b29a      	uxth	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008176:	2b00      	cmp	r3, #0
 8008178:	d116      	bne.n	80081a8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	78db      	ldrb	r3, [r3, #3]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b01      	cmp	r3, #1
 8008184:	d005      	beq.n	8008192 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	78db      	ldrb	r3, [r3, #3]
 800818a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800818e:	2b03      	cmp	r3, #3
 8008190:	d127      	bne.n	80081e2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	799b      	ldrb	r3, [r3, #6]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <USBH_ParseEPDesc+0xfc>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	799b      	ldrb	r3, [r3, #6]
 800819e:	2b10      	cmp	r3, #16
 80081a0:	d91f      	bls.n	80081e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081a2:	2303      	movs	r3, #3
 80081a4:	75fb      	strb	r3, [r7, #23]
 80081a6:	e01c      	b.n	80081e2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	78db      	ldrb	r3, [r3, #3]
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10a      	bne.n	80081ca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	799b      	ldrb	r3, [r3, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <USBH_ParseEPDesc+0x11e>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	799b      	ldrb	r3, [r3, #6]
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d90e      	bls.n	80081e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081c4:	2303      	movs	r3, #3
 80081c6:	75fb      	strb	r3, [r7, #23]
 80081c8:	e00b      	b.n	80081e2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	78db      	ldrb	r3, [r3, #3]
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d105      	bne.n	80081e2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	799b      	ldrb	r3, [r3, #6]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80081de:	2303      	movs	r3, #3
 80081e0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d120      	bne.n	800824a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	1e9a      	subs	r2, r3, #2
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	4293      	cmp	r3, r2
 8008212:	bf28      	it	cs
 8008214:	4613      	movcs	r3, r2
 8008216:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3302      	adds	r3, #2
 800821c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800821e:	2300      	movs	r3, #0
 8008220:	82fb      	strh	r3, [r7, #22]
 8008222:	e00b      	b.n	800823c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008224:	8afb      	ldrh	r3, [r7, #22]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4413      	add	r3, r2
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3301      	adds	r3, #1
 8008234:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008236:	8afb      	ldrh	r3, [r7, #22]
 8008238:	3302      	adds	r3, #2
 800823a:	82fb      	strh	r3, [r7, #22]
 800823c:	8afa      	ldrh	r2, [r7, #22]
 800823e:	8abb      	ldrh	r3, [r7, #20]
 8008240:	429a      	cmp	r2, r3
 8008242:	d3ef      	bcc.n	8008224 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
  }
}
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	881a      	ldrh	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4413      	add	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4413      	add	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800827e:	68fb      	ldr	r3, [r7, #12]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800829a:	2301      	movs	r3, #1
 800829c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	789b      	ldrb	r3, [r3, #2]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d002      	beq.n	80082ac <USBH_CtlReq+0x20>
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d00f      	beq.n	80082ca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082aa:	e027      	b.n	80082fc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2202      	movs	r2, #2
 80082c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
      break;
 80082c8:	e018      	b.n	80082fc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f81c 	bl	8008308 <USBH_HandleControl>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <USBH_CtlReq+0x54>
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d106      	bne.n	80082ee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e005      	b.n	80082fa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d102      	bne.n	80082fa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	709a      	strb	r2, [r3, #2]
      break;
 80082fa:	bf00      	nop
  }
  return status;
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af02      	add	r7, sp, #8
 800830e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008314:	2300      	movs	r3, #0
 8008316:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7e1b      	ldrb	r3, [r3, #24]
 800831c:	3b01      	subs	r3, #1
 800831e:	2b0a      	cmp	r3, #10
 8008320:	f200 8156 	bhi.w	80085d0 <USBH_HandleControl+0x2c8>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBH_HandleControl+0x24>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008359 	.word	0x08008359
 8008330:	08008373 	.word	0x08008373
 8008334:	080083dd 	.word	0x080083dd
 8008338:	08008403 	.word	0x08008403
 800833c:	0800843b 	.word	0x0800843b
 8008340:	08008465 	.word	0x08008465
 8008344:	080084b7 	.word	0x080084b7
 8008348:	080084d9 	.word	0x080084d9
 800834c:	08008515 	.word	0x08008515
 8008350:	0800853b 	.word	0x0800853b
 8008354:	08008579 	.word	0x08008579
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f103 0110 	add.w	r1, r3, #16
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	795b      	ldrb	r3, [r3, #5]
 8008362:	461a      	mov	r2, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f943 	bl	80085f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2202      	movs	r2, #2
 800836e:	761a      	strb	r2, [r3, #24]
      break;
 8008370:	e139      	b.n	80085e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	795b      	ldrb	r3, [r3, #5]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fcc5 	bl	8008d08 <USBH_LL_GetURBState>
 800837e:	4603      	mov	r3, r0
 8008380:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d11e      	bne.n	80083c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7c1b      	ldrb	r3, [r3, #16]
 800838c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008390:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8adb      	ldrh	r3, [r3, #22]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800839a:	7b7b      	ldrb	r3, [r7, #13]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d103      	bne.n	80083a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2203      	movs	r2, #3
 80083a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083a6:	e115      	b.n	80085d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2205      	movs	r2, #5
 80083ac:	761a      	strb	r2, [r3, #24]
      break;
 80083ae:	e111      	b.n	80085d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d103      	bne.n	80083be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2209      	movs	r2, #9
 80083ba:	761a      	strb	r2, [r3, #24]
      break;
 80083bc:	e10a      	b.n	80085d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2207      	movs	r2, #7
 80083c2:	761a      	strb	r2, [r3, #24]
      break;
 80083c4:	e106      	b.n	80085d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d003      	beq.n	80083d4 <USBH_HandleControl+0xcc>
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	f040 8100 	bne.w	80085d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	220b      	movs	r2, #11
 80083d8:	761a      	strb	r2, [r3, #24]
      break;
 80083da:	e0fb      	b.n	80085d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6899      	ldr	r1, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	899a      	ldrh	r2, [r3, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	791b      	ldrb	r3, [r3, #4]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f93a 	bl	800866e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2204      	movs	r2, #4
 80083fe:	761a      	strb	r2, [r3, #24]
      break;
 8008400:	e0f1      	b.n	80085e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fc7d 	bl	8008d08 <USBH_LL_GetURBState>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d102      	bne.n	800841e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2209      	movs	r2, #9
 800841c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b05      	cmp	r3, #5
 8008422:	d102      	bne.n	800842a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008424:	2303      	movs	r3, #3
 8008426:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008428:	e0d6      	b.n	80085d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b04      	cmp	r3, #4
 800842e:	f040 80d3 	bne.w	80085d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	220b      	movs	r2, #11
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e0ce      	b.n	80085d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6899      	ldr	r1, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	899a      	ldrh	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	795b      	ldrb	r3, [r3, #5]
 8008446:	2001      	movs	r0, #1
 8008448:	9000      	str	r0, [sp, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f8ea 	bl	8008624 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008456:	b29a      	uxth	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2206      	movs	r2, #6
 8008460:	761a      	strb	r2, [r3, #24]
      break;
 8008462:	e0c0      	b.n	80085e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	795b      	ldrb	r3, [r3, #5]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc4c 	bl	8008d08 <USBH_LL_GetURBState>
 8008470:	4603      	mov	r3, r0
 8008472:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d103      	bne.n	8008482 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2207      	movs	r2, #7
 800847e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008480:	e0ac      	b.n	80085dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b05      	cmp	r3, #5
 8008486:	d105      	bne.n	8008494 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	220c      	movs	r2, #12
 800848c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800848e:	2303      	movs	r3, #3
 8008490:	73fb      	strb	r3, [r7, #15]
      break;
 8008492:	e0a3      	b.n	80085dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d103      	bne.n	80084a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2205      	movs	r2, #5
 800849e:	761a      	strb	r2, [r3, #24]
      break;
 80084a0:	e09c      	b.n	80085dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	f040 8099 	bne.w	80085dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220b      	movs	r2, #11
 80084ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	73fb      	strb	r3, [r7, #15]
      break;
 80084b4:	e092      	b.n	80085dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f8d5 	bl	800866e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2208      	movs	r2, #8
 80084d4:	761a      	strb	r2, [r3, #24]

      break;
 80084d6:	e086      	b.n	80085e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	791b      	ldrb	r3, [r3, #4]
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fc12 	bl	8008d08 <USBH_LL_GetURBState>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d105      	bne.n	80084fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	220d      	movs	r2, #13
 80084f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f8:	e072      	b.n	80085e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d103      	bne.n	8008508 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	220b      	movs	r2, #11
 8008504:	761a      	strb	r2, [r3, #24]
      break;
 8008506:	e06b      	b.n	80085e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	2b05      	cmp	r3, #5
 800850c:	d168      	bne.n	80085e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800850e:	2303      	movs	r3, #3
 8008510:	73fb      	strb	r3, [r7, #15]
      break;
 8008512:	e065      	b.n	80085e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	795b      	ldrb	r3, [r3, #5]
 8008518:	2201      	movs	r2, #1
 800851a:	9200      	str	r2, [sp, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f87f 	bl	8008624 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800852c:	b29a      	uxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	220a      	movs	r2, #10
 8008536:	761a      	strb	r2, [r3, #24]
      break;
 8008538:	e055      	b.n	80085e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	795b      	ldrb	r3, [r3, #5]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbe1 	bl	8008d08 <USBH_LL_GetURBState>
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d105      	bne.n	800855c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220d      	movs	r2, #13
 8008558:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800855a:	e043      	b.n	80085e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b02      	cmp	r3, #2
 8008560:	d103      	bne.n	800856a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2209      	movs	r2, #9
 8008566:	761a      	strb	r2, [r3, #24]
      break;
 8008568:	e03c      	b.n	80085e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b04      	cmp	r3, #4
 800856e:	d139      	bne.n	80085e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	220b      	movs	r2, #11
 8008574:	761a      	strb	r2, [r3, #24]
      break;
 8008576:	e035      	b.n	80085e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7e5b      	ldrb	r3, [r3, #25]
 800857c:	3301      	adds	r3, #1
 800857e:	b2da      	uxtb	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	765a      	strb	r2, [r3, #25]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7e5b      	ldrb	r3, [r3, #25]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d806      	bhi.n	800859a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008598:	e025      	b.n	80085e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085a0:	2106      	movs	r1, #6
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	795b      	ldrb	r3, [r3, #5]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f90c 	bl	80087d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f906 	bl	80087d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085ca:	2302      	movs	r3, #2
 80085cc:	73fb      	strb	r3, [r7, #15]
      break;
 80085ce:	e00a      	b.n	80085e6 <USBH_HandleControl+0x2de>

    default:
      break;
 80085d0:	bf00      	nop
 80085d2:	e008      	b.n	80085e6 <USBH_HandleControl+0x2de>
      break;
 80085d4:	bf00      	nop
 80085d6:	e006      	b.n	80085e6 <USBH_HandleControl+0x2de>
      break;
 80085d8:	bf00      	nop
 80085da:	e004      	b.n	80085e6 <USBH_HandleControl+0x2de>
      break;
 80085dc:	bf00      	nop
 80085de:	e002      	b.n	80085e6 <USBH_HandleControl+0x2de>
      break;
 80085e0:	bf00      	nop
 80085e2:	e000      	b.n	80085e6 <USBH_HandleControl+0x2de>
      break;
 80085e4:	bf00      	nop
  }

  return status;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af04      	add	r7, sp, #16
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085fe:	79f9      	ldrb	r1, [r7, #7]
 8008600:	2300      	movs	r3, #0
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	2308      	movs	r3, #8
 8008606:	9302      	str	r3, [sp, #8]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	2200      	movs	r2, #0
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fb46 	bl	8008ca6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af04      	add	r7, sp, #16
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4611      	mov	r1, r2
 8008630:	461a      	mov	r2, r3
 8008632:	460b      	mov	r3, r1
 8008634:	80fb      	strh	r3, [r7, #6]
 8008636:	4613      	mov	r3, r2
 8008638:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008648:	7979      	ldrb	r1, [r7, #5]
 800864a:	7e3b      	ldrb	r3, [r7, #24]
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	2301      	movs	r3, #1
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	2200      	movs	r2, #0
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fb21 	bl	8008ca6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b088      	sub	sp, #32
 8008672:	af04      	add	r7, sp, #16
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	4611      	mov	r1, r2
 800867a:	461a      	mov	r2, r3
 800867c:	460b      	mov	r3, r1
 800867e:	80fb      	strh	r3, [r7, #6]
 8008680:	4613      	mov	r3, r2
 8008682:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008684:	7979      	ldrb	r1, [r7, #5]
 8008686:	2300      	movs	r3, #0
 8008688:	9303      	str	r3, [sp, #12]
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	9302      	str	r3, [sp, #8]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	2301      	movs	r3, #1
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	2201      	movs	r2, #1
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fb03 	bl	8008ca6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086a0:	2300      	movs	r3, #0

}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b088      	sub	sp, #32
 80086ae:	af04      	add	r7, sp, #16
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	4611      	mov	r1, r2
 80086b6:	461a      	mov	r2, r3
 80086b8:	460b      	mov	r3, r1
 80086ba:	80fb      	strh	r3, [r7, #6]
 80086bc:	4613      	mov	r3, r2
 80086be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ce:	7979      	ldrb	r1, [r7, #5]
 80086d0:	7e3b      	ldrb	r3, [r7, #24]
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	2301      	movs	r3, #1
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2302      	movs	r3, #2
 80086e2:	2200      	movs	r2, #0
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 fade 	bl	8008ca6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af04      	add	r7, sp, #16
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4611      	mov	r1, r2
 8008700:	461a      	mov	r2, r3
 8008702:	460b      	mov	r3, r1
 8008704:	80fb      	strh	r3, [r7, #6]
 8008706:	4613      	mov	r3, r2
 8008708:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800870a:	7979      	ldrb	r1, [r7, #5]
 800870c:	2300      	movs	r3, #0
 800870e:	9303      	str	r3, [sp, #12]
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	2301      	movs	r3, #1
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	2302      	movs	r3, #2
 800871e:	2201      	movs	r2, #1
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fac0 	bl	8008ca6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af04      	add	r7, sp, #16
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	461a      	mov	r2, r3
 800873e:	4603      	mov	r3, r0
 8008740:	70fb      	strb	r3, [r7, #3]
 8008742:	460b      	mov	r3, r1
 8008744:	70bb      	strb	r3, [r7, #2]
 8008746:	4613      	mov	r3, r2
 8008748:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800874a:	7878      	ldrb	r0, [r7, #1]
 800874c:	78ba      	ldrb	r2, [r7, #2]
 800874e:	78f9      	ldrb	r1, [r7, #3]
 8008750:	8b3b      	ldrh	r3, [r7, #24]
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	7d3b      	ldrb	r3, [r7, #20]
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	7c3b      	ldrb	r3, [r7, #16]
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	4603      	mov	r3, r0
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa53 	bl	8008c0a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa72 	bl	8008c68 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f836 	bl	800880c <USBH_GetFreePipe>
 80087a0:	4603      	mov	r3, r0
 80087a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087a4:	89fb      	ldrh	r3, [r7, #14]
 80087a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00a      	beq.n	80087c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	33e0      	adds	r3, #224	; 0xe0
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087c4:	89fb      	ldrh	r3, [r7, #14]
 80087c6:	b2db      	uxtb	r3, r3
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	2b0f      	cmp	r3, #15
 80087e0:	d80d      	bhi.n	80087fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	33e0      	adds	r3, #224	; 0xe0
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	33e0      	adds	r3, #224	; 0xe0
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	e00f      	b.n	800883e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	33e0      	adds	r3, #224	; 0xe0
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	b29b      	uxth	r3, r3
 8008836:	e007      	b.n	8008848 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	3301      	adds	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b0f      	cmp	r3, #15
 8008842:	d9ec      	bls.n	800881e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008844:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008858:	2201      	movs	r2, #1
 800885a:	490e      	ldr	r1, [pc, #56]	; (8008894 <MX_USB_HOST_Init+0x40>)
 800885c:	480e      	ldr	r0, [pc, #56]	; (8008898 <MX_USB_HOST_Init+0x44>)
 800885e:	f7fe fba7 	bl	8006fb0 <USBH_Init>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008868:	f7f8 f94e 	bl	8000b08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800886c:	490b      	ldr	r1, [pc, #44]	; (800889c <MX_USB_HOST_Init+0x48>)
 800886e:	480a      	ldr	r0, [pc, #40]	; (8008898 <MX_USB_HOST_Init+0x44>)
 8008870:	f7fe fc2c 	bl	80070cc <USBH_RegisterClass>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800887a:	f7f8 f945 	bl	8000b08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800887e:	4806      	ldr	r0, [pc, #24]	; (8008898 <MX_USB_HOST_Init+0x44>)
 8008880:	f7fe fcb0 	bl	80071e4 <USBH_Start>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800888a:	f7f8 f93d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800888e:	bf00      	nop
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	080088b5 	.word	0x080088b5
 8008898:	20000204 	.word	0x20000204
 800889c:	2000000c 	.word	0x2000000c

080088a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80088a4:	4802      	ldr	r0, [pc, #8]	; (80088b0 <MX_USB_HOST_Process+0x10>)
 80088a6:	f7fe fcad 	bl	8007204 <USBH_Process>
}
 80088aa:	bf00      	nop
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000204 	.word	0x20000204

080088b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d819      	bhi.n	80088fc <USBH_UserProcess+0x48>
 80088c8:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <USBH_UserProcess+0x1c>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	080088fd 	.word	0x080088fd
 80088d4:	080088ed 	.word	0x080088ed
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	080088e5 	.word	0x080088e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088e4:	4b09      	ldr	r3, [pc, #36]	; (800890c <USBH_UserProcess+0x58>)
 80088e6:	2203      	movs	r2, #3
 80088e8:	701a      	strb	r2, [r3, #0]
  break;
 80088ea:	e008      	b.n	80088fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <USBH_UserProcess+0x58>)
 80088ee:	2202      	movs	r2, #2
 80088f0:	701a      	strb	r2, [r3, #0]
  break;
 80088f2:	e004      	b.n	80088fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088f4:	4b05      	ldr	r3, [pc, #20]	; (800890c <USBH_UserProcess+0x58>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
  break;
 80088fa:	e000      	b.n	80088fe <USBH_UserProcess+0x4a>

  default:
  break;
 80088fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088fe:	bf00      	nop
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	200005dc 	.word	0x200005dc

08008910 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	; 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008930:	d147      	bne.n	80089c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	4b25      	ldr	r3, [pc, #148]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	4a24      	ldr	r2, [pc, #144]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	6313      	str	r3, [r2, #48]	; 0x30
 8008942:	4b22      	ldr	r3, [pc, #136]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800894e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008954:	2300      	movs	r3, #0
 8008956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	4619      	mov	r1, r3
 8008962:	481b      	ldr	r0, [pc, #108]	; (80089d0 <HAL_HCD_MspInit+0xc0>)
 8008964:	f7f8 fe38 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008968:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800896c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800896e:	2302      	movs	r3, #2
 8008970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800897a:	230a      	movs	r3, #10
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800897e:	f107 0314 	add.w	r3, r7, #20
 8008982:	4619      	mov	r1, r3
 8008984:	4812      	ldr	r0, [pc, #72]	; (80089d0 <HAL_HCD_MspInit+0xc0>)
 8008986:	f7f8 fe27 	bl	80015d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800898a:	4b10      	ldr	r3, [pc, #64]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	4a0f      	ldr	r2, [pc, #60]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 8008990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008994:	6353      	str	r3, [r2, #52]	; 0x34
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 80089a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089a4:	6453      	str	r3, [r2, #68]	; 0x44
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <HAL_HCD_MspInit+0xbc>)
 80089a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	2043      	movs	r0, #67	; 0x43
 80089b8:	f7f8 fd45 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089bc:	2043      	movs	r0, #67	; 0x43
 80089be:	f7f8 fd5e 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089c2:	bf00      	nop
 80089c4:	3728      	adds	r7, #40	; 0x28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40023800 	.word	0x40023800
 80089d0:	40020000 	.word	0x40020000

080089d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe ffed 	bl	80079c2 <USBH_LL_IncTimer>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff f825 	bl	8007a4e <USBH_LL_Connect>
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f82e 	bl	8007a7c <USBH_LL_Disconnect>
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
 8008a34:	4613      	mov	r3, r2
 8008a36:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe ffdf 	bl	8007a16 <USBH_LL_PortEnabled>
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe ffdf 	bl	8007a32 <USBH_LL_PortDisabled>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d12a      	bne.n	8008ae4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a8e:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <USBH_LL_Init+0x74>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <USBH_LL_Init+0x74>)
 8008a9a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a9e:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <USBH_LL_Init+0x74>)
 8008aa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008aa4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008aa6:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <USBH_LL_Init+0x74>)
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008aac:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <USBH_LL_Init+0x74>)
 8008aae:	2201      	movs	r2, #1
 8008ab0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ab2:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <USBH_LL_Init+0x74>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <USBH_LL_Init+0x74>)
 8008aba:	2202      	movs	r2, #2
 8008abc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <USBH_LL_Init+0x74>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ac4:	480a      	ldr	r0, [pc, #40]	; (8008af0 <USBH_LL_Init+0x74>)
 8008ac6:	f7f8 ff6e 	bl	80019a6 <HAL_HCD_Init>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ad0:	f7f8 f81a 	bl	8000b08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ad4:	4806      	ldr	r0, [pc, #24]	; (8008af0 <USBH_LL_Init+0x74>)
 8008ad6:	f7f9 fb52 	bl	800217e <HAL_HCD_GetCurrentFrame>
 8008ada:	4603      	mov	r3, r0
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7fe ff60 	bl	80079a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200005e0 	.word	0x200005e0

08008af4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f9 fac1 	bl	8002092 <HAL_HCD_Start>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f95c 	bl	8008dd4 <USBH_Get_USB_Status>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7f9 fac9 	bl	80020d8 <HAL_HCD_Stop>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f941 	bl	8008dd4 <USBH_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 fb11 	bl	800219a <HAL_HCD_GetCurrentSpeed>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d00c      	beq.n	8008b98 <USBH_LL_GetSpeed+0x38>
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d80d      	bhi.n	8008b9e <USBH_LL_GetSpeed+0x3e>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <USBH_LL_GetSpeed+0x2c>
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d003      	beq.n	8008b92 <USBH_LL_GetSpeed+0x32>
 8008b8a:	e008      	b.n	8008b9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	e008      	b.n	8008ba4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b92:	2301      	movs	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
    break;
 8008b96:	e005      	b.n	8008ba4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9c:	e002      	b.n	8008ba4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba2:	bf00      	nop
  }
  return  speed;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7f9 faa4 	bl	8002112 <HAL_HCD_ResetPort>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f8ff 	bl	8008dd4 <USBH_Get_USB_Status>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f9 faab 	bl	8002156 <HAL_HCD_HC_GetXferCount>
 8008c00:	4603      	mov	r3, r0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c0a:	b590      	push	{r4, r7, lr}
 8008c0c:	b089      	sub	sp, #36	; 0x24
 8008c0e:	af04      	add	r7, sp, #16
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	4603      	mov	r3, r0
 8008c1a:	70fb      	strb	r3, [r7, #3]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70bb      	strb	r3, [r7, #2]
 8008c20:	4613      	mov	r3, r2
 8008c22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c32:	787c      	ldrb	r4, [r7, #1]
 8008c34:	78ba      	ldrb	r2, [r7, #2]
 8008c36:	78f9      	ldrb	r1, [r7, #3]
 8008c38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c3a:	9302      	str	r3, [sp, #8]
 8008c3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	4623      	mov	r3, r4
 8008c4a:	f7f8 ff0e 	bl	8001a6a <HAL_HCD_HC_Init>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f8bd 	bl	8008dd4 <USBH_Get_USB_Status>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd90      	pop	{r4, r7, pc}

08008c68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f8 ff7e 	bl	8001b88 <HAL_HCD_HC_Halt>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f89e 	bl	8008dd4 <USBH_Get_USB_Status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008ca6:	b590      	push	{r4, r7, lr}
 8008ca8:	b089      	sub	sp, #36	; 0x24
 8008caa:	af04      	add	r7, sp, #16
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70bb      	strb	r3, [r7, #2]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cce:	787c      	ldrb	r4, [r7, #1]
 8008cd0:	78ba      	ldrb	r2, [r7, #2]
 8008cd2:	78f9      	ldrb	r1, [r7, #3]
 8008cd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cd8:	9303      	str	r3, [sp, #12]
 8008cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cdc:	9302      	str	r3, [sp, #8]
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4623      	mov	r3, r4
 8008cea:	f7f8 ff71 	bl	8001bd0 <HAL_HCD_HC_SubmitRequest>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f86d 	bl	8008dd4 <USBH_Get_USB_Status>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}

08008d08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7f9 fa05 	bl	800212e <HAL_HCD_HC_GetURBState>
 8008d24:	4603      	mov	r3, r0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d103      	bne.n	8008d4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f870 	bl	8008e2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d4c:	20c8      	movs	r0, #200	; 0xc8
 8008d4e:	f7f8 fa7b 	bl	8001248 <HAL_Delay>
  return USBH_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	212c      	movs	r1, #44	; 0x2c
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	333b      	adds	r3, #59	; 0x3b
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d009      	beq.n	8008d9c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	212c      	movs	r1, #44	; 0x2c
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3354      	adds	r3, #84	; 0x54
 8008d96:	78ba      	ldrb	r2, [r7, #2]
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e008      	b.n	8008dae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	212c      	movs	r1, #44	; 0x2c
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	3355      	adds	r3, #85	; 0x55
 8008daa:	78ba      	ldrb	r2, [r7, #2]
 8008dac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7f8 fa3f 	bl	8001248 <HAL_Delay>
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d817      	bhi.n	8008e18 <USBH_Get_USB_Status+0x44>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBH_Get_USB_Status+0x1c>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e07 	.word	0x08008e07
 8008df8:	08008e0d 	.word	0x08008e0d
 8008dfc:	08008e13 	.word	0x08008e13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e00b      	b.n	8008e1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	e008      	b.n	8008e1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	e005      	b.n	8008e1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e12:	2302      	movs	r3, #2
 8008e14:	73fb      	strb	r3, [r7, #15]
    break;
 8008e16:	e002      	b.n	8008e1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1c:	bf00      	nop
  }
  return usb_status;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
 8008e44:	e001      	b.n	8008e4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008e46:	2301      	movs	r3, #1
 8008e48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	2101      	movs	r1, #1
 8008e50:	4803      	ldr	r0, [pc, #12]	; (8008e60 <MX_DriverVbusFS+0x34>)
 8008e52:	f7f8 fd75 	bl	8001940 <HAL_GPIO_WritePin>
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40020800 	.word	0x40020800

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	; (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	2000002c 	.word	0x2000002c

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	; (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	; (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	; (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	; (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f001 f81c 	bl	8009ec0 <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	0800a004 	.word	0x0800a004
 8008eac:	0800a004 	.word	0x0800a004
 8008eb0:	0800a004 	.word	0x0800a004
 8008eb4:	0800a008 	.word	0x0800a008

08008eb8 <malloc>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <malloc+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f000 b87f 	b.w	8008fc0 <_malloc_r>
 8008ec2:	bf00      	nop
 8008ec4:	2000002c 	.word	0x2000002c

08008ec8 <free>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <free+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f000 b80b 	b.w	8008ee8 <_free_r>
 8008ed2:	bf00      	nop
 8008ed4:	2000002c 	.word	0x2000002c

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <_free_r>:
 8008ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d044      	beq.n	8008f78 <_free_r+0x90>
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8008efa:	bfb8      	it	lt
 8008efc:	18e4      	addlt	r4, r4, r3
 8008efe:	f000 fa09 	bl	8009314 <__malloc_lock>
 8008f02:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <_free_r+0x94>)
 8008f04:	9801      	ldr	r0, [sp, #4]
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	b933      	cbnz	r3, 8008f18 <_free_r+0x30>
 8008f0a:	6063      	str	r3, [r4, #4]
 8008f0c:	6014      	str	r4, [r2, #0]
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f14:	f000 ba04 	b.w	8009320 <__malloc_unlock>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d908      	bls.n	8008f2e <_free_r+0x46>
 8008f1c:	6825      	ldr	r5, [r4, #0]
 8008f1e:	1961      	adds	r1, r4, r5
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf01      	itttt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	1949      	addeq	r1, r1, r5
 8008f2a:	6021      	streq	r1, [r4, #0]
 8008f2c:	e7ed      	b.n	8008f0a <_free_r+0x22>
 8008f2e:	461a      	mov	r2, r3
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	b10b      	cbz	r3, 8008f38 <_free_r+0x50>
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d9fa      	bls.n	8008f2e <_free_r+0x46>
 8008f38:	6811      	ldr	r1, [r2, #0]
 8008f3a:	1855      	adds	r5, r2, r1
 8008f3c:	42a5      	cmp	r5, r4
 8008f3e:	d10b      	bne.n	8008f58 <_free_r+0x70>
 8008f40:	6824      	ldr	r4, [r4, #0]
 8008f42:	4421      	add	r1, r4
 8008f44:	1854      	adds	r4, r2, r1
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	d1e0      	bne.n	8008f0e <_free_r+0x26>
 8008f4c:	681c      	ldr	r4, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	6053      	str	r3, [r2, #4]
 8008f52:	4421      	add	r1, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	e7da      	b.n	8008f0e <_free_r+0x26>
 8008f58:	d902      	bls.n	8008f60 <_free_r+0x78>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	e7d6      	b.n	8008f0e <_free_r+0x26>
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf04      	itt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	bf04      	itt	eq
 8008f70:	1949      	addeq	r1, r1, r5
 8008f72:	6021      	streq	r1, [r4, #0]
 8008f74:	6054      	str	r4, [r2, #4]
 8008f76:	e7ca      	b.n	8008f0e <_free_r+0x26>
 8008f78:	b003      	add	sp, #12
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	200008e4 	.word	0x200008e4

08008f80 <sbrk_aligned>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4e0e      	ldr	r6, [pc, #56]	; (8008fbc <sbrk_aligned+0x3c>)
 8008f84:	460c      	mov	r4, r1
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b911      	cbnz	r1, 8008f92 <sbrk_aligned+0x12>
 8008f8c:	f000 f8ba 	bl	8009104 <_sbrk_r>
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 f8b5 	bl	8009104 <_sbrk_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d00a      	beq.n	8008fb4 <sbrk_aligned+0x34>
 8008f9e:	1cc4      	adds	r4, r0, #3
 8008fa0:	f024 0403 	bic.w	r4, r4, #3
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d007      	beq.n	8008fb8 <sbrk_aligned+0x38>
 8008fa8:	1a21      	subs	r1, r4, r0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f8aa 	bl	8009104 <_sbrk_r>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d101      	bne.n	8008fb8 <sbrk_aligned+0x38>
 8008fb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008fb8:	4620      	mov	r0, r4
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	200008e8 	.word	0x200008e8

08008fc0 <_malloc_r>:
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	1ccd      	adds	r5, r1, #3
 8008fc6:	f025 0503 	bic.w	r5, r5, #3
 8008fca:	3508      	adds	r5, #8
 8008fcc:	2d0c      	cmp	r5, #12
 8008fce:	bf38      	it	cc
 8008fd0:	250c      	movcc	r5, #12
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	db01      	blt.n	8008fdc <_malloc_r+0x1c>
 8008fd8:	42a9      	cmp	r1, r5
 8008fda:	d905      	bls.n	8008fe8 <_malloc_r+0x28>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	4e2e      	ldr	r6, [pc, #184]	; (80090a4 <_malloc_r+0xe4>)
 8008fea:	f000 f993 	bl	8009314 <__malloc_lock>
 8008fee:	6833      	ldr	r3, [r6, #0]
 8008ff0:	461c      	mov	r4, r3
 8008ff2:	bb34      	cbnz	r4, 8009042 <_malloc_r+0x82>
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ffc2 	bl	8008f80 <sbrk_aligned>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	4604      	mov	r4, r0
 8009000:	d14d      	bne.n	800909e <_malloc_r+0xde>
 8009002:	6834      	ldr	r4, [r6, #0]
 8009004:	4626      	mov	r6, r4
 8009006:	2e00      	cmp	r6, #0
 8009008:	d140      	bne.n	800908c <_malloc_r+0xcc>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	4631      	mov	r1, r6
 800900e:	4638      	mov	r0, r7
 8009010:	eb04 0803 	add.w	r8, r4, r3
 8009014:	f000 f876 	bl	8009104 <_sbrk_r>
 8009018:	4580      	cmp	r8, r0
 800901a:	d13a      	bne.n	8009092 <_malloc_r+0xd2>
 800901c:	6821      	ldr	r1, [r4, #0]
 800901e:	3503      	adds	r5, #3
 8009020:	1a6d      	subs	r5, r5, r1
 8009022:	f025 0503 	bic.w	r5, r5, #3
 8009026:	3508      	adds	r5, #8
 8009028:	2d0c      	cmp	r5, #12
 800902a:	bf38      	it	cc
 800902c:	250c      	movcc	r5, #12
 800902e:	4629      	mov	r1, r5
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa5 	bl	8008f80 <sbrk_aligned>
 8009036:	3001      	adds	r0, #1
 8009038:	d02b      	beq.n	8009092 <_malloc_r+0xd2>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	442b      	add	r3, r5
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	e00e      	b.n	8009060 <_malloc_r+0xa0>
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	1b52      	subs	r2, r2, r5
 8009046:	d41e      	bmi.n	8009086 <_malloc_r+0xc6>
 8009048:	2a0b      	cmp	r2, #11
 800904a:	d916      	bls.n	800907a <_malloc_r+0xba>
 800904c:	1961      	adds	r1, r4, r5
 800904e:	42a3      	cmp	r3, r4
 8009050:	6025      	str	r5, [r4, #0]
 8009052:	bf18      	it	ne
 8009054:	6059      	strne	r1, [r3, #4]
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	bf08      	it	eq
 800905a:	6031      	streq	r1, [r6, #0]
 800905c:	5162      	str	r2, [r4, r5]
 800905e:	604b      	str	r3, [r1, #4]
 8009060:	4638      	mov	r0, r7
 8009062:	f104 060b 	add.w	r6, r4, #11
 8009066:	f000 f95b 	bl	8009320 <__malloc_unlock>
 800906a:	f026 0607 	bic.w	r6, r6, #7
 800906e:	1d23      	adds	r3, r4, #4
 8009070:	1af2      	subs	r2, r6, r3
 8009072:	d0b6      	beq.n	8008fe2 <_malloc_r+0x22>
 8009074:	1b9b      	subs	r3, r3, r6
 8009076:	50a3      	str	r3, [r4, r2]
 8009078:	e7b3      	b.n	8008fe2 <_malloc_r+0x22>
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	42a3      	cmp	r3, r4
 800907e:	bf0c      	ite	eq
 8009080:	6032      	streq	r2, [r6, #0]
 8009082:	605a      	strne	r2, [r3, #4]
 8009084:	e7ec      	b.n	8009060 <_malloc_r+0xa0>
 8009086:	4623      	mov	r3, r4
 8009088:	6864      	ldr	r4, [r4, #4]
 800908a:	e7b2      	b.n	8008ff2 <_malloc_r+0x32>
 800908c:	4634      	mov	r4, r6
 800908e:	6876      	ldr	r6, [r6, #4]
 8009090:	e7b9      	b.n	8009006 <_malloc_r+0x46>
 8009092:	230c      	movs	r3, #12
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4638      	mov	r0, r7
 8009098:	f000 f942 	bl	8009320 <__malloc_unlock>
 800909c:	e7a1      	b.n	8008fe2 <_malloc_r+0x22>
 800909e:	6025      	str	r5, [r4, #0]
 80090a0:	e7de      	b.n	8009060 <_malloc_r+0xa0>
 80090a2:	bf00      	nop
 80090a4:	200008e4 	.word	0x200008e4

080090a8 <iprintf>:
 80090a8:	b40f      	push	{r0, r1, r2, r3}
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <iprintf+0x2c>)
 80090ac:	b513      	push	{r0, r1, r4, lr}
 80090ae:	681c      	ldr	r4, [r3, #0]
 80090b0:	b124      	cbz	r4, 80090bc <iprintf+0x14>
 80090b2:	69a3      	ldr	r3, [r4, #24]
 80090b4:	b913      	cbnz	r3, 80090bc <iprintf+0x14>
 80090b6:	4620      	mov	r0, r4
 80090b8:	f000 f88c 	bl	80091d4 <__sinit>
 80090bc:	ab05      	add	r3, sp, #20
 80090be:	9a04      	ldr	r2, [sp, #16]
 80090c0:	68a1      	ldr	r1, [r4, #8]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 f95b 	bl	8009380 <_vfiprintf_r>
 80090ca:	b002      	add	sp, #8
 80090cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d0:	b004      	add	sp, #16
 80090d2:	4770      	bx	lr
 80090d4:	2000002c 	.word	0x2000002c

080090d8 <putchar>:
 80090d8:	4b09      	ldr	r3, [pc, #36]	; (8009100 <putchar+0x28>)
 80090da:	b513      	push	{r0, r1, r4, lr}
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	4601      	mov	r1, r0
 80090e0:	b134      	cbz	r4, 80090f0 <putchar+0x18>
 80090e2:	69a3      	ldr	r3, [r4, #24]
 80090e4:	b923      	cbnz	r3, 80090f0 <putchar+0x18>
 80090e6:	9001      	str	r0, [sp, #4]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f873 	bl	80091d4 <__sinit>
 80090ee:	9901      	ldr	r1, [sp, #4]
 80090f0:	68a2      	ldr	r2, [r4, #8]
 80090f2:	4620      	mov	r0, r4
 80090f4:	b002      	add	sp, #8
 80090f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fa:	f000 bc05 	b.w	8009908 <_putc_r>
 80090fe:	bf00      	nop
 8009100:	2000002c 	.word	0x2000002c

08009104 <_sbrk_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	; (8009120 <_sbrk_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f7 ffb6 	bl	8001080 <_sbrk>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_sbrk_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_sbrk_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	200008f0 	.word	0x200008f0

08009124 <std>:
 8009124:	2300      	movs	r3, #0
 8009126:	b510      	push	{r4, lr}
 8009128:	4604      	mov	r4, r0
 800912a:	e9c0 3300 	strd	r3, r3, [r0]
 800912e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009132:	6083      	str	r3, [r0, #8]
 8009134:	8181      	strh	r1, [r0, #12]
 8009136:	6643      	str	r3, [r0, #100]	; 0x64
 8009138:	81c2      	strh	r2, [r0, #14]
 800913a:	6183      	str	r3, [r0, #24]
 800913c:	4619      	mov	r1, r3
 800913e:	2208      	movs	r2, #8
 8009140:	305c      	adds	r0, #92	; 0x5c
 8009142:	f7ff fec9 	bl	8008ed8 <memset>
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <std+0x38>)
 8009148:	6263      	str	r3, [r4, #36]	; 0x24
 800914a:	4b05      	ldr	r3, [pc, #20]	; (8009160 <std+0x3c>)
 800914c:	62a3      	str	r3, [r4, #40]	; 0x28
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <std+0x40>)
 8009150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <std+0x44>)
 8009154:	6224      	str	r4, [r4, #32]
 8009156:	6323      	str	r3, [r4, #48]	; 0x30
 8009158:	bd10      	pop	{r4, pc}
 800915a:	bf00      	nop
 800915c:	08009999 	.word	0x08009999
 8009160:	080099bb 	.word	0x080099bb
 8009164:	080099f3 	.word	0x080099f3
 8009168:	08009a17 	.word	0x08009a17

0800916c <_cleanup_r>:
 800916c:	4901      	ldr	r1, [pc, #4]	; (8009174 <_cleanup_r+0x8>)
 800916e:	f000 b8af 	b.w	80092d0 <_fwalk_reent>
 8009172:	bf00      	nop
 8009174:	08009cf1 	.word	0x08009cf1

08009178 <__sfmoreglue>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	2268      	movs	r2, #104	; 0x68
 800917c:	1e4d      	subs	r5, r1, #1
 800917e:	4355      	muls	r5, r2
 8009180:	460e      	mov	r6, r1
 8009182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009186:	f7ff ff1b 	bl	8008fc0 <_malloc_r>
 800918a:	4604      	mov	r4, r0
 800918c:	b140      	cbz	r0, 80091a0 <__sfmoreglue+0x28>
 800918e:	2100      	movs	r1, #0
 8009190:	e9c0 1600 	strd	r1, r6, [r0]
 8009194:	300c      	adds	r0, #12
 8009196:	60a0      	str	r0, [r4, #8]
 8009198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800919c:	f7ff fe9c 	bl	8008ed8 <memset>
 80091a0:	4620      	mov	r0, r4
 80091a2:	bd70      	pop	{r4, r5, r6, pc}

080091a4 <__sfp_lock_acquire>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sfp_lock_acquire+0x8>)
 80091a6:	f000 b8b3 	b.w	8009310 <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	200008ed 	.word	0x200008ed

080091b0 <__sfp_lock_release>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sfp_lock_release+0x8>)
 80091b2:	f000 b8ae 	b.w	8009312 <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	200008ed 	.word	0x200008ed

080091bc <__sinit_lock_acquire>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sinit_lock_acquire+0x8>)
 80091be:	f000 b8a7 	b.w	8009310 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	200008ee 	.word	0x200008ee

080091c8 <__sinit_lock_release>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sinit_lock_release+0x8>)
 80091ca:	f000 b8a2 	b.w	8009312 <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	200008ee 	.word	0x200008ee

080091d4 <__sinit>:
 80091d4:	b510      	push	{r4, lr}
 80091d6:	4604      	mov	r4, r0
 80091d8:	f7ff fff0 	bl	80091bc <__sinit_lock_acquire>
 80091dc:	69a3      	ldr	r3, [r4, #24]
 80091de:	b11b      	cbz	r3, 80091e8 <__sinit+0x14>
 80091e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e4:	f7ff bff0 	b.w	80091c8 <__sinit_lock_release>
 80091e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091ec:	6523      	str	r3, [r4, #80]	; 0x50
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <__sinit+0x68>)
 80091f0:	4a13      	ldr	r2, [pc, #76]	; (8009240 <__sinit+0x6c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	bf04      	itt	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	61a3      	streq	r3, [r4, #24]
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 f820 	bl	8009244 <__sfp>
 8009204:	6060      	str	r0, [r4, #4]
 8009206:	4620      	mov	r0, r4
 8009208:	f000 f81c 	bl	8009244 <__sfp>
 800920c:	60a0      	str	r0, [r4, #8]
 800920e:	4620      	mov	r0, r4
 8009210:	f000 f818 	bl	8009244 <__sfp>
 8009214:	2200      	movs	r2, #0
 8009216:	60e0      	str	r0, [r4, #12]
 8009218:	2104      	movs	r1, #4
 800921a:	6860      	ldr	r0, [r4, #4]
 800921c:	f7ff ff82 	bl	8009124 <std>
 8009220:	68a0      	ldr	r0, [r4, #8]
 8009222:	2201      	movs	r2, #1
 8009224:	2109      	movs	r1, #9
 8009226:	f7ff ff7d 	bl	8009124 <std>
 800922a:	68e0      	ldr	r0, [r4, #12]
 800922c:	2202      	movs	r2, #2
 800922e:	2112      	movs	r1, #18
 8009230:	f7ff ff78 	bl	8009124 <std>
 8009234:	2301      	movs	r3, #1
 8009236:	61a3      	str	r3, [r4, #24]
 8009238:	e7d2      	b.n	80091e0 <__sinit+0xc>
 800923a:	bf00      	nop
 800923c:	08009f64 	.word	0x08009f64
 8009240:	0800916d 	.word	0x0800916d

08009244 <__sfp>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	4607      	mov	r7, r0
 8009248:	f7ff ffac 	bl	80091a4 <__sfp_lock_acquire>
 800924c:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <__sfp+0x84>)
 800924e:	681e      	ldr	r6, [r3, #0]
 8009250:	69b3      	ldr	r3, [r6, #24]
 8009252:	b913      	cbnz	r3, 800925a <__sfp+0x16>
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ffbd 	bl	80091d4 <__sinit>
 800925a:	3648      	adds	r6, #72	; 0x48
 800925c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009260:	3b01      	subs	r3, #1
 8009262:	d503      	bpl.n	800926c <__sfp+0x28>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	b30b      	cbz	r3, 80092ac <__sfp+0x68>
 8009268:	6836      	ldr	r6, [r6, #0]
 800926a:	e7f7      	b.n	800925c <__sfp+0x18>
 800926c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009270:	b9d5      	cbnz	r5, 80092a8 <__sfp+0x64>
 8009272:	4b16      	ldr	r3, [pc, #88]	; (80092cc <__sfp+0x88>)
 8009274:	60e3      	str	r3, [r4, #12]
 8009276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800927a:	6665      	str	r5, [r4, #100]	; 0x64
 800927c:	f000 f847 	bl	800930e <__retarget_lock_init_recursive>
 8009280:	f7ff ff96 	bl	80091b0 <__sfp_lock_release>
 8009284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800928c:	6025      	str	r5, [r4, #0]
 800928e:	61a5      	str	r5, [r4, #24]
 8009290:	2208      	movs	r2, #8
 8009292:	4629      	mov	r1, r5
 8009294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009298:	f7ff fe1e 	bl	8008ed8 <memset>
 800929c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092a4:	4620      	mov	r0, r4
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a8:	3468      	adds	r4, #104	; 0x68
 80092aa:	e7d9      	b.n	8009260 <__sfp+0x1c>
 80092ac:	2104      	movs	r1, #4
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ff62 	bl	8009178 <__sfmoreglue>
 80092b4:	4604      	mov	r4, r0
 80092b6:	6030      	str	r0, [r6, #0]
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d1d5      	bne.n	8009268 <__sfp+0x24>
 80092bc:	f7ff ff78 	bl	80091b0 <__sfp_lock_release>
 80092c0:	230c      	movs	r3, #12
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	e7ee      	b.n	80092a4 <__sfp+0x60>
 80092c6:	bf00      	nop
 80092c8:	08009f64 	.word	0x08009f64
 80092cc:	ffff0001 	.word	0xffff0001

080092d0 <_fwalk_reent>:
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4606      	mov	r6, r0
 80092d6:	4688      	mov	r8, r1
 80092d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092dc:	2700      	movs	r7, #0
 80092de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092e2:	f1b9 0901 	subs.w	r9, r9, #1
 80092e6:	d505      	bpl.n	80092f4 <_fwalk_reent+0x24>
 80092e8:	6824      	ldr	r4, [r4, #0]
 80092ea:	2c00      	cmp	r4, #0
 80092ec:	d1f7      	bne.n	80092de <_fwalk_reent+0xe>
 80092ee:	4638      	mov	r0, r7
 80092f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f4:	89ab      	ldrh	r3, [r5, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d907      	bls.n	800930a <_fwalk_reent+0x3a>
 80092fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092fe:	3301      	adds	r3, #1
 8009300:	d003      	beq.n	800930a <_fwalk_reent+0x3a>
 8009302:	4629      	mov	r1, r5
 8009304:	4630      	mov	r0, r6
 8009306:	47c0      	blx	r8
 8009308:	4307      	orrs	r7, r0
 800930a:	3568      	adds	r5, #104	; 0x68
 800930c:	e7e9      	b.n	80092e2 <_fwalk_reent+0x12>

0800930e <__retarget_lock_init_recursive>:
 800930e:	4770      	bx	lr

08009310 <__retarget_lock_acquire_recursive>:
 8009310:	4770      	bx	lr

08009312 <__retarget_lock_release_recursive>:
 8009312:	4770      	bx	lr

08009314 <__malloc_lock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_lock+0x8>)
 8009316:	f7ff bffb 	b.w	8009310 <__retarget_lock_acquire_recursive>
 800931a:	bf00      	nop
 800931c:	200008ec 	.word	0x200008ec

08009320 <__malloc_unlock>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__malloc_unlock+0x8>)
 8009322:	f7ff bff6 	b.w	8009312 <__retarget_lock_release_recursive>
 8009326:	bf00      	nop
 8009328:	200008ec 	.word	0x200008ec

0800932c <__sfputc_r>:
 800932c:	6893      	ldr	r3, [r2, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	b410      	push	{r4}
 8009334:	6093      	str	r3, [r2, #8]
 8009336:	da08      	bge.n	800934a <__sfputc_r+0x1e>
 8009338:	6994      	ldr	r4, [r2, #24]
 800933a:	42a3      	cmp	r3, r4
 800933c:	db01      	blt.n	8009342 <__sfputc_r+0x16>
 800933e:	290a      	cmp	r1, #10
 8009340:	d103      	bne.n	800934a <__sfputc_r+0x1e>
 8009342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009346:	f000 bb6b 	b.w	8009a20 <__swbuf_r>
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	1c58      	adds	r0, r3, #1
 800934e:	6010      	str	r0, [r2, #0]
 8009350:	7019      	strb	r1, [r3, #0]
 8009352:	4608      	mov	r0, r1
 8009354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009358:	4770      	bx	lr

0800935a <__sfputs_r>:
 800935a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	4614      	mov	r4, r2
 8009362:	18d5      	adds	r5, r2, r3
 8009364:	42ac      	cmp	r4, r5
 8009366:	d101      	bne.n	800936c <__sfputs_r+0x12>
 8009368:	2000      	movs	r0, #0
 800936a:	e007      	b.n	800937c <__sfputs_r+0x22>
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	463a      	mov	r2, r7
 8009372:	4630      	mov	r0, r6
 8009374:	f7ff ffda 	bl	800932c <__sfputc_r>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d1f3      	bne.n	8009364 <__sfputs_r+0xa>
 800937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009380 <_vfiprintf_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	460d      	mov	r5, r1
 8009386:	b09d      	sub	sp, #116	; 0x74
 8009388:	4614      	mov	r4, r2
 800938a:	4698      	mov	r8, r3
 800938c:	4606      	mov	r6, r0
 800938e:	b118      	cbz	r0, 8009398 <_vfiprintf_r+0x18>
 8009390:	6983      	ldr	r3, [r0, #24]
 8009392:	b90b      	cbnz	r3, 8009398 <_vfiprintf_r+0x18>
 8009394:	f7ff ff1e 	bl	80091d4 <__sinit>
 8009398:	4b89      	ldr	r3, [pc, #548]	; (80095c0 <_vfiprintf_r+0x240>)
 800939a:	429d      	cmp	r5, r3
 800939c:	d11b      	bne.n	80093d6 <_vfiprintf_r+0x56>
 800939e:	6875      	ldr	r5, [r6, #4]
 80093a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x32>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x32>
 80093ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ae:	f7ff ffaf 	bl	8009310 <__retarget_lock_acquire_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	d501      	bpl.n	80093bc <_vfiprintf_r+0x3c>
 80093b8:	692b      	ldr	r3, [r5, #16]
 80093ba:	b9eb      	cbnz	r3, 80093f8 <_vfiprintf_r+0x78>
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 fb92 	bl	8009ae8 <__swsetup_r>
 80093c4:	b1c0      	cbz	r0, 80093f8 <_vfiprintf_r+0x78>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c8:	07dc      	lsls	r4, r3, #31
 80093ca:	d50e      	bpl.n	80093ea <_vfiprintf_r+0x6a>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d0:	b01d      	add	sp, #116	; 0x74
 80093d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d6:	4b7b      	ldr	r3, [pc, #492]	; (80095c4 <_vfiprintf_r+0x244>)
 80093d8:	429d      	cmp	r5, r3
 80093da:	d101      	bne.n	80093e0 <_vfiprintf_r+0x60>
 80093dc:	68b5      	ldr	r5, [r6, #8]
 80093de:	e7df      	b.n	80093a0 <_vfiprintf_r+0x20>
 80093e0:	4b79      	ldr	r3, [pc, #484]	; (80095c8 <_vfiprintf_r+0x248>)
 80093e2:	429d      	cmp	r5, r3
 80093e4:	bf08      	it	eq
 80093e6:	68f5      	ldreq	r5, [r6, #12]
 80093e8:	e7da      	b.n	80093a0 <_vfiprintf_r+0x20>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	0598      	lsls	r0, r3, #22
 80093ee:	d4ed      	bmi.n	80093cc <_vfiprintf_r+0x4c>
 80093f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093f2:	f7ff ff8e 	bl	8009312 <__retarget_lock_release_recursive>
 80093f6:	e7e9      	b.n	80093cc <_vfiprintf_r+0x4c>
 80093f8:	2300      	movs	r3, #0
 80093fa:	9309      	str	r3, [sp, #36]	; 0x24
 80093fc:	2320      	movs	r3, #32
 80093fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009402:	f8cd 800c 	str.w	r8, [sp, #12]
 8009406:	2330      	movs	r3, #48	; 0x30
 8009408:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095cc <_vfiprintf_r+0x24c>
 800940c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009410:	f04f 0901 	mov.w	r9, #1
 8009414:	4623      	mov	r3, r4
 8009416:	469a      	mov	sl, r3
 8009418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800941c:	b10a      	cbz	r2, 8009422 <_vfiprintf_r+0xa2>
 800941e:	2a25      	cmp	r2, #37	; 0x25
 8009420:	d1f9      	bne.n	8009416 <_vfiprintf_r+0x96>
 8009422:	ebba 0b04 	subs.w	fp, sl, r4
 8009426:	d00b      	beq.n	8009440 <_vfiprintf_r+0xc0>
 8009428:	465b      	mov	r3, fp
 800942a:	4622      	mov	r2, r4
 800942c:	4629      	mov	r1, r5
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff ff93 	bl	800935a <__sfputs_r>
 8009434:	3001      	adds	r0, #1
 8009436:	f000 80aa 	beq.w	800958e <_vfiprintf_r+0x20e>
 800943a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943c:	445a      	add	r2, fp
 800943e:	9209      	str	r2, [sp, #36]	; 0x24
 8009440:	f89a 3000 	ldrb.w	r3, [sl]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80a2 	beq.w	800958e <_vfiprintf_r+0x20e>
 800944a:	2300      	movs	r3, #0
 800944c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009454:	f10a 0a01 	add.w	sl, sl, #1
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	9307      	str	r3, [sp, #28]
 800945c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009460:	931a      	str	r3, [sp, #104]	; 0x68
 8009462:	4654      	mov	r4, sl
 8009464:	2205      	movs	r2, #5
 8009466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946a:	4858      	ldr	r0, [pc, #352]	; (80095cc <_vfiprintf_r+0x24c>)
 800946c:	f7f6 feb0 	bl	80001d0 <memchr>
 8009470:	9a04      	ldr	r2, [sp, #16]
 8009472:	b9d8      	cbnz	r0, 80094ac <_vfiprintf_r+0x12c>
 8009474:	06d1      	lsls	r1, r2, #27
 8009476:	bf44      	itt	mi
 8009478:	2320      	movmi	r3, #32
 800947a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947e:	0713      	lsls	r3, r2, #28
 8009480:	bf44      	itt	mi
 8009482:	232b      	movmi	r3, #43	; 0x2b
 8009484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009488:	f89a 3000 	ldrb.w	r3, [sl]
 800948c:	2b2a      	cmp	r3, #42	; 0x2a
 800948e:	d015      	beq.n	80094bc <_vfiprintf_r+0x13c>
 8009490:	9a07      	ldr	r2, [sp, #28]
 8009492:	4654      	mov	r4, sl
 8009494:	2000      	movs	r0, #0
 8009496:	f04f 0c0a 	mov.w	ip, #10
 800949a:	4621      	mov	r1, r4
 800949c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094a0:	3b30      	subs	r3, #48	; 0x30
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	d94e      	bls.n	8009544 <_vfiprintf_r+0x1c4>
 80094a6:	b1b0      	cbz	r0, 80094d6 <_vfiprintf_r+0x156>
 80094a8:	9207      	str	r2, [sp, #28]
 80094aa:	e014      	b.n	80094d6 <_vfiprintf_r+0x156>
 80094ac:	eba0 0308 	sub.w	r3, r0, r8
 80094b0:	fa09 f303 	lsl.w	r3, r9, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	9304      	str	r3, [sp, #16]
 80094b8:	46a2      	mov	sl, r4
 80094ba:	e7d2      	b.n	8009462 <_vfiprintf_r+0xe2>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	1d19      	adds	r1, r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	9103      	str	r1, [sp, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfbb      	ittet	lt
 80094c8:	425b      	neglt	r3, r3
 80094ca:	f042 0202 	orrlt.w	r2, r2, #2
 80094ce:	9307      	strge	r3, [sp, #28]
 80094d0:	9307      	strlt	r3, [sp, #28]
 80094d2:	bfb8      	it	lt
 80094d4:	9204      	strlt	r2, [sp, #16]
 80094d6:	7823      	ldrb	r3, [r4, #0]
 80094d8:	2b2e      	cmp	r3, #46	; 0x2e
 80094da:	d10c      	bne.n	80094f6 <_vfiprintf_r+0x176>
 80094dc:	7863      	ldrb	r3, [r4, #1]
 80094de:	2b2a      	cmp	r3, #42	; 0x2a
 80094e0:	d135      	bne.n	800954e <_vfiprintf_r+0x1ce>
 80094e2:	9b03      	ldr	r3, [sp, #12]
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	9203      	str	r2, [sp, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	bfb8      	it	lt
 80094ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094f2:	3402      	adds	r4, #2
 80094f4:	9305      	str	r3, [sp, #20]
 80094f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095dc <_vfiprintf_r+0x25c>
 80094fa:	7821      	ldrb	r1, [r4, #0]
 80094fc:	2203      	movs	r2, #3
 80094fe:	4650      	mov	r0, sl
 8009500:	f7f6 fe66 	bl	80001d0 <memchr>
 8009504:	b140      	cbz	r0, 8009518 <_vfiprintf_r+0x198>
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	eba0 000a 	sub.w	r0, r0, sl
 800950c:	fa03 f000 	lsl.w	r0, r3, r0
 8009510:	9b04      	ldr	r3, [sp, #16]
 8009512:	4303      	orrs	r3, r0
 8009514:	3401      	adds	r4, #1
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951c:	482c      	ldr	r0, [pc, #176]	; (80095d0 <_vfiprintf_r+0x250>)
 800951e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009522:	2206      	movs	r2, #6
 8009524:	f7f6 fe54 	bl	80001d0 <memchr>
 8009528:	2800      	cmp	r0, #0
 800952a:	d03f      	beq.n	80095ac <_vfiprintf_r+0x22c>
 800952c:	4b29      	ldr	r3, [pc, #164]	; (80095d4 <_vfiprintf_r+0x254>)
 800952e:	bb1b      	cbnz	r3, 8009578 <_vfiprintf_r+0x1f8>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	3307      	adds	r3, #7
 8009534:	f023 0307 	bic.w	r3, r3, #7
 8009538:	3308      	adds	r3, #8
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953e:	443b      	add	r3, r7
 8009540:	9309      	str	r3, [sp, #36]	; 0x24
 8009542:	e767      	b.n	8009414 <_vfiprintf_r+0x94>
 8009544:	fb0c 3202 	mla	r2, ip, r2, r3
 8009548:	460c      	mov	r4, r1
 800954a:	2001      	movs	r0, #1
 800954c:	e7a5      	b.n	800949a <_vfiprintf_r+0x11a>
 800954e:	2300      	movs	r3, #0
 8009550:	3401      	adds	r4, #1
 8009552:	9305      	str	r3, [sp, #20]
 8009554:	4619      	mov	r1, r3
 8009556:	f04f 0c0a 	mov.w	ip, #10
 800955a:	4620      	mov	r0, r4
 800955c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009560:	3a30      	subs	r2, #48	; 0x30
 8009562:	2a09      	cmp	r2, #9
 8009564:	d903      	bls.n	800956e <_vfiprintf_r+0x1ee>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0c5      	beq.n	80094f6 <_vfiprintf_r+0x176>
 800956a:	9105      	str	r1, [sp, #20]
 800956c:	e7c3      	b.n	80094f6 <_vfiprintf_r+0x176>
 800956e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009572:	4604      	mov	r4, r0
 8009574:	2301      	movs	r3, #1
 8009576:	e7f0      	b.n	800955a <_vfiprintf_r+0x1da>
 8009578:	ab03      	add	r3, sp, #12
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	462a      	mov	r2, r5
 800957e:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <_vfiprintf_r+0x258>)
 8009580:	a904      	add	r1, sp, #16
 8009582:	4630      	mov	r0, r6
 8009584:	f3af 8000 	nop.w
 8009588:	4607      	mov	r7, r0
 800958a:	1c78      	adds	r0, r7, #1
 800958c:	d1d6      	bne.n	800953c <_vfiprintf_r+0x1bc>
 800958e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009590:	07d9      	lsls	r1, r3, #31
 8009592:	d405      	bmi.n	80095a0 <_vfiprintf_r+0x220>
 8009594:	89ab      	ldrh	r3, [r5, #12]
 8009596:	059a      	lsls	r2, r3, #22
 8009598:	d402      	bmi.n	80095a0 <_vfiprintf_r+0x220>
 800959a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959c:	f7ff feb9 	bl	8009312 <__retarget_lock_release_recursive>
 80095a0:	89ab      	ldrh	r3, [r5, #12]
 80095a2:	065b      	lsls	r3, r3, #25
 80095a4:	f53f af12 	bmi.w	80093cc <_vfiprintf_r+0x4c>
 80095a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095aa:	e711      	b.n	80093d0 <_vfiprintf_r+0x50>
 80095ac:	ab03      	add	r3, sp, #12
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	462a      	mov	r2, r5
 80095b2:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <_vfiprintf_r+0x258>)
 80095b4:	a904      	add	r1, sp, #16
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f880 	bl	80096bc <_printf_i>
 80095bc:	e7e4      	b.n	8009588 <_vfiprintf_r+0x208>
 80095be:	bf00      	nop
 80095c0:	08009f88 	.word	0x08009f88
 80095c4:	08009fa8 	.word	0x08009fa8
 80095c8:	08009f68 	.word	0x08009f68
 80095cc:	08009fc8 	.word	0x08009fc8
 80095d0:	08009fd2 	.word	0x08009fd2
 80095d4:	00000000 	.word	0x00000000
 80095d8:	0800935b 	.word	0x0800935b
 80095dc:	08009fce 	.word	0x08009fce

080095e0 <_printf_common>:
 80095e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e4:	4616      	mov	r6, r2
 80095e6:	4699      	mov	r9, r3
 80095e8:	688a      	ldr	r2, [r1, #8]
 80095ea:	690b      	ldr	r3, [r1, #16]
 80095ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	bfb8      	it	lt
 80095f4:	4613      	movlt	r3, r2
 80095f6:	6033      	str	r3, [r6, #0]
 80095f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095fc:	4607      	mov	r7, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	b10a      	cbz	r2, 8009606 <_printf_common+0x26>
 8009602:	3301      	adds	r3, #1
 8009604:	6033      	str	r3, [r6, #0]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	0699      	lsls	r1, r3, #26
 800960a:	bf42      	ittt	mi
 800960c:	6833      	ldrmi	r3, [r6, #0]
 800960e:	3302      	addmi	r3, #2
 8009610:	6033      	strmi	r3, [r6, #0]
 8009612:	6825      	ldr	r5, [r4, #0]
 8009614:	f015 0506 	ands.w	r5, r5, #6
 8009618:	d106      	bne.n	8009628 <_printf_common+0x48>
 800961a:	f104 0a19 	add.w	sl, r4, #25
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	6832      	ldr	r2, [r6, #0]
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	42ab      	cmp	r3, r5
 8009626:	dc26      	bgt.n	8009676 <_printf_common+0x96>
 8009628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800962c:	1e13      	subs	r3, r2, #0
 800962e:	6822      	ldr	r2, [r4, #0]
 8009630:	bf18      	it	ne
 8009632:	2301      	movne	r3, #1
 8009634:	0692      	lsls	r2, r2, #26
 8009636:	d42b      	bmi.n	8009690 <_printf_common+0xb0>
 8009638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800963c:	4649      	mov	r1, r9
 800963e:	4638      	mov	r0, r7
 8009640:	47c0      	blx	r8
 8009642:	3001      	adds	r0, #1
 8009644:	d01e      	beq.n	8009684 <_printf_common+0xa4>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	68e5      	ldr	r5, [r4, #12]
 800964a:	6832      	ldr	r2, [r6, #0]
 800964c:	f003 0306 	and.w	r3, r3, #6
 8009650:	2b04      	cmp	r3, #4
 8009652:	bf08      	it	eq
 8009654:	1aad      	subeq	r5, r5, r2
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	bf0c      	ite	eq
 800965c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009660:	2500      	movne	r5, #0
 8009662:	4293      	cmp	r3, r2
 8009664:	bfc4      	itt	gt
 8009666:	1a9b      	subgt	r3, r3, r2
 8009668:	18ed      	addgt	r5, r5, r3
 800966a:	2600      	movs	r6, #0
 800966c:	341a      	adds	r4, #26
 800966e:	42b5      	cmp	r5, r6
 8009670:	d11a      	bne.n	80096a8 <_printf_common+0xc8>
 8009672:	2000      	movs	r0, #0
 8009674:	e008      	b.n	8009688 <_printf_common+0xa8>
 8009676:	2301      	movs	r3, #1
 8009678:	4652      	mov	r2, sl
 800967a:	4649      	mov	r1, r9
 800967c:	4638      	mov	r0, r7
 800967e:	47c0      	blx	r8
 8009680:	3001      	adds	r0, #1
 8009682:	d103      	bne.n	800968c <_printf_common+0xac>
 8009684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968c:	3501      	adds	r5, #1
 800968e:	e7c6      	b.n	800961e <_printf_common+0x3e>
 8009690:	18e1      	adds	r1, r4, r3
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	2030      	movs	r0, #48	; 0x30
 8009696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800969a:	4422      	add	r2, r4
 800969c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096a4:	3302      	adds	r3, #2
 80096a6:	e7c7      	b.n	8009638 <_printf_common+0x58>
 80096a8:	2301      	movs	r3, #1
 80096aa:	4622      	mov	r2, r4
 80096ac:	4649      	mov	r1, r9
 80096ae:	4638      	mov	r0, r7
 80096b0:	47c0      	blx	r8
 80096b2:	3001      	adds	r0, #1
 80096b4:	d0e6      	beq.n	8009684 <_printf_common+0xa4>
 80096b6:	3601      	adds	r6, #1
 80096b8:	e7d9      	b.n	800966e <_printf_common+0x8e>
	...

080096bc <_printf_i>:
 80096bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	7e0f      	ldrb	r7, [r1, #24]
 80096c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096c4:	2f78      	cmp	r7, #120	; 0x78
 80096c6:	4691      	mov	r9, r2
 80096c8:	4680      	mov	r8, r0
 80096ca:	460c      	mov	r4, r1
 80096cc:	469a      	mov	sl, r3
 80096ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096d2:	d807      	bhi.n	80096e4 <_printf_i+0x28>
 80096d4:	2f62      	cmp	r7, #98	; 0x62
 80096d6:	d80a      	bhi.n	80096ee <_printf_i+0x32>
 80096d8:	2f00      	cmp	r7, #0
 80096da:	f000 80d8 	beq.w	800988e <_printf_i+0x1d2>
 80096de:	2f58      	cmp	r7, #88	; 0x58
 80096e0:	f000 80a3 	beq.w	800982a <_printf_i+0x16e>
 80096e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096ec:	e03a      	b.n	8009764 <_printf_i+0xa8>
 80096ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096f2:	2b15      	cmp	r3, #21
 80096f4:	d8f6      	bhi.n	80096e4 <_printf_i+0x28>
 80096f6:	a101      	add	r1, pc, #4	; (adr r1, 80096fc <_printf_i+0x40>)
 80096f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096fc:	08009755 	.word	0x08009755
 8009700:	08009769 	.word	0x08009769
 8009704:	080096e5 	.word	0x080096e5
 8009708:	080096e5 	.word	0x080096e5
 800970c:	080096e5 	.word	0x080096e5
 8009710:	080096e5 	.word	0x080096e5
 8009714:	08009769 	.word	0x08009769
 8009718:	080096e5 	.word	0x080096e5
 800971c:	080096e5 	.word	0x080096e5
 8009720:	080096e5 	.word	0x080096e5
 8009724:	080096e5 	.word	0x080096e5
 8009728:	08009875 	.word	0x08009875
 800972c:	08009799 	.word	0x08009799
 8009730:	08009857 	.word	0x08009857
 8009734:	080096e5 	.word	0x080096e5
 8009738:	080096e5 	.word	0x080096e5
 800973c:	08009897 	.word	0x08009897
 8009740:	080096e5 	.word	0x080096e5
 8009744:	08009799 	.word	0x08009799
 8009748:	080096e5 	.word	0x080096e5
 800974c:	080096e5 	.word	0x080096e5
 8009750:	0800985f 	.word	0x0800985f
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	1d1a      	adds	r2, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	602a      	str	r2, [r5, #0]
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009764:	2301      	movs	r3, #1
 8009766:	e0a3      	b.n	80098b0 <_printf_i+0x1f4>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	6829      	ldr	r1, [r5, #0]
 800976c:	0606      	lsls	r6, r0, #24
 800976e:	f101 0304 	add.w	r3, r1, #4
 8009772:	d50a      	bpl.n	800978a <_printf_i+0xce>
 8009774:	680e      	ldr	r6, [r1, #0]
 8009776:	602b      	str	r3, [r5, #0]
 8009778:	2e00      	cmp	r6, #0
 800977a:	da03      	bge.n	8009784 <_printf_i+0xc8>
 800977c:	232d      	movs	r3, #45	; 0x2d
 800977e:	4276      	negs	r6, r6
 8009780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009784:	485e      	ldr	r0, [pc, #376]	; (8009900 <_printf_i+0x244>)
 8009786:	230a      	movs	r3, #10
 8009788:	e019      	b.n	80097be <_printf_i+0x102>
 800978a:	680e      	ldr	r6, [r1, #0]
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009792:	bf18      	it	ne
 8009794:	b236      	sxthne	r6, r6
 8009796:	e7ef      	b.n	8009778 <_printf_i+0xbc>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	1d19      	adds	r1, r3, #4
 800979e:	6029      	str	r1, [r5, #0]
 80097a0:	0601      	lsls	r1, r0, #24
 80097a2:	d501      	bpl.n	80097a8 <_printf_i+0xec>
 80097a4:	681e      	ldr	r6, [r3, #0]
 80097a6:	e002      	b.n	80097ae <_printf_i+0xf2>
 80097a8:	0646      	lsls	r6, r0, #25
 80097aa:	d5fb      	bpl.n	80097a4 <_printf_i+0xe8>
 80097ac:	881e      	ldrh	r6, [r3, #0]
 80097ae:	4854      	ldr	r0, [pc, #336]	; (8009900 <_printf_i+0x244>)
 80097b0:	2f6f      	cmp	r7, #111	; 0x6f
 80097b2:	bf0c      	ite	eq
 80097b4:	2308      	moveq	r3, #8
 80097b6:	230a      	movne	r3, #10
 80097b8:	2100      	movs	r1, #0
 80097ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097be:	6865      	ldr	r5, [r4, #4]
 80097c0:	60a5      	str	r5, [r4, #8]
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	bfa2      	ittt	ge
 80097c6:	6821      	ldrge	r1, [r4, #0]
 80097c8:	f021 0104 	bicge.w	r1, r1, #4
 80097cc:	6021      	strge	r1, [r4, #0]
 80097ce:	b90e      	cbnz	r6, 80097d4 <_printf_i+0x118>
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	d04d      	beq.n	8009870 <_printf_i+0x1b4>
 80097d4:	4615      	mov	r5, r2
 80097d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80097da:	fb03 6711 	mls	r7, r3, r1, r6
 80097de:	5dc7      	ldrb	r7, [r0, r7]
 80097e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097e4:	4637      	mov	r7, r6
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	460e      	mov	r6, r1
 80097ea:	d9f4      	bls.n	80097d6 <_printf_i+0x11a>
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d10b      	bne.n	8009808 <_printf_i+0x14c>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	07de      	lsls	r6, r3, #31
 80097f4:	d508      	bpl.n	8009808 <_printf_i+0x14c>
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	6861      	ldr	r1, [r4, #4]
 80097fa:	4299      	cmp	r1, r3
 80097fc:	bfde      	ittt	le
 80097fe:	2330      	movle	r3, #48	; 0x30
 8009800:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009804:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009808:	1b52      	subs	r2, r2, r5
 800980a:	6122      	str	r2, [r4, #16]
 800980c:	f8cd a000 	str.w	sl, [sp]
 8009810:	464b      	mov	r3, r9
 8009812:	aa03      	add	r2, sp, #12
 8009814:	4621      	mov	r1, r4
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fee2 	bl	80095e0 <_printf_common>
 800981c:	3001      	adds	r0, #1
 800981e:	d14c      	bne.n	80098ba <_printf_i+0x1fe>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009824:	b004      	add	sp, #16
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	4835      	ldr	r0, [pc, #212]	; (8009900 <_printf_i+0x244>)
 800982c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009830:	6829      	ldr	r1, [r5, #0]
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f851 6b04 	ldr.w	r6, [r1], #4
 8009838:	6029      	str	r1, [r5, #0]
 800983a:	061d      	lsls	r5, r3, #24
 800983c:	d514      	bpl.n	8009868 <_printf_i+0x1ac>
 800983e:	07df      	lsls	r7, r3, #31
 8009840:	bf44      	itt	mi
 8009842:	f043 0320 	orrmi.w	r3, r3, #32
 8009846:	6023      	strmi	r3, [r4, #0]
 8009848:	b91e      	cbnz	r6, 8009852 <_printf_i+0x196>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f023 0320 	bic.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	2310      	movs	r3, #16
 8009854:	e7b0      	b.n	80097b8 <_printf_i+0xfc>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	f043 0320 	orr.w	r3, r3, #32
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	2378      	movs	r3, #120	; 0x78
 8009860:	4828      	ldr	r0, [pc, #160]	; (8009904 <_printf_i+0x248>)
 8009862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009866:	e7e3      	b.n	8009830 <_printf_i+0x174>
 8009868:	0659      	lsls	r1, r3, #25
 800986a:	bf48      	it	mi
 800986c:	b2b6      	uxthmi	r6, r6
 800986e:	e7e6      	b.n	800983e <_printf_i+0x182>
 8009870:	4615      	mov	r5, r2
 8009872:	e7bb      	b.n	80097ec <_printf_i+0x130>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	6826      	ldr	r6, [r4, #0]
 8009878:	6961      	ldr	r1, [r4, #20]
 800987a:	1d18      	adds	r0, r3, #4
 800987c:	6028      	str	r0, [r5, #0]
 800987e:	0635      	lsls	r5, r6, #24
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	d501      	bpl.n	8009888 <_printf_i+0x1cc>
 8009884:	6019      	str	r1, [r3, #0]
 8009886:	e002      	b.n	800988e <_printf_i+0x1d2>
 8009888:	0670      	lsls	r0, r6, #25
 800988a:	d5fb      	bpl.n	8009884 <_printf_i+0x1c8>
 800988c:	8019      	strh	r1, [r3, #0]
 800988e:	2300      	movs	r3, #0
 8009890:	6123      	str	r3, [r4, #16]
 8009892:	4615      	mov	r5, r2
 8009894:	e7ba      	b.n	800980c <_printf_i+0x150>
 8009896:	682b      	ldr	r3, [r5, #0]
 8009898:	1d1a      	adds	r2, r3, #4
 800989a:	602a      	str	r2, [r5, #0]
 800989c:	681d      	ldr	r5, [r3, #0]
 800989e:	6862      	ldr	r2, [r4, #4]
 80098a0:	2100      	movs	r1, #0
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7f6 fc94 	bl	80001d0 <memchr>
 80098a8:	b108      	cbz	r0, 80098ae <_printf_i+0x1f2>
 80098aa:	1b40      	subs	r0, r0, r5
 80098ac:	6060      	str	r0, [r4, #4]
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	2300      	movs	r3, #0
 80098b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b8:	e7a8      	b.n	800980c <_printf_i+0x150>
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	462a      	mov	r2, r5
 80098be:	4649      	mov	r1, r9
 80098c0:	4640      	mov	r0, r8
 80098c2:	47d0      	blx	sl
 80098c4:	3001      	adds	r0, #1
 80098c6:	d0ab      	beq.n	8009820 <_printf_i+0x164>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	079b      	lsls	r3, r3, #30
 80098cc:	d413      	bmi.n	80098f6 <_printf_i+0x23a>
 80098ce:	68e0      	ldr	r0, [r4, #12]
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	4298      	cmp	r0, r3
 80098d4:	bfb8      	it	lt
 80098d6:	4618      	movlt	r0, r3
 80098d8:	e7a4      	b.n	8009824 <_printf_i+0x168>
 80098da:	2301      	movs	r3, #1
 80098dc:	4632      	mov	r2, r6
 80098de:	4649      	mov	r1, r9
 80098e0:	4640      	mov	r0, r8
 80098e2:	47d0      	blx	sl
 80098e4:	3001      	adds	r0, #1
 80098e6:	d09b      	beq.n	8009820 <_printf_i+0x164>
 80098e8:	3501      	adds	r5, #1
 80098ea:	68e3      	ldr	r3, [r4, #12]
 80098ec:	9903      	ldr	r1, [sp, #12]
 80098ee:	1a5b      	subs	r3, r3, r1
 80098f0:	42ab      	cmp	r3, r5
 80098f2:	dcf2      	bgt.n	80098da <_printf_i+0x21e>
 80098f4:	e7eb      	b.n	80098ce <_printf_i+0x212>
 80098f6:	2500      	movs	r5, #0
 80098f8:	f104 0619 	add.w	r6, r4, #25
 80098fc:	e7f5      	b.n	80098ea <_printf_i+0x22e>
 80098fe:	bf00      	nop
 8009900:	08009fd9 	.word	0x08009fd9
 8009904:	08009fea 	.word	0x08009fea

08009908 <_putc_r>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	460d      	mov	r5, r1
 800990c:	4614      	mov	r4, r2
 800990e:	4606      	mov	r6, r0
 8009910:	b118      	cbz	r0, 800991a <_putc_r+0x12>
 8009912:	6983      	ldr	r3, [r0, #24]
 8009914:	b90b      	cbnz	r3, 800991a <_putc_r+0x12>
 8009916:	f7ff fc5d 	bl	80091d4 <__sinit>
 800991a:	4b1c      	ldr	r3, [pc, #112]	; (800998c <_putc_r+0x84>)
 800991c:	429c      	cmp	r4, r3
 800991e:	d124      	bne.n	800996a <_putc_r+0x62>
 8009920:	6874      	ldr	r4, [r6, #4]
 8009922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009924:	07d8      	lsls	r0, r3, #31
 8009926:	d405      	bmi.n	8009934 <_putc_r+0x2c>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	0599      	lsls	r1, r3, #22
 800992c:	d402      	bmi.n	8009934 <_putc_r+0x2c>
 800992e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009930:	f7ff fcee 	bl	8009310 <__retarget_lock_acquire_recursive>
 8009934:	68a3      	ldr	r3, [r4, #8]
 8009936:	3b01      	subs	r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	60a3      	str	r3, [r4, #8]
 800993c:	da05      	bge.n	800994a <_putc_r+0x42>
 800993e:	69a2      	ldr	r2, [r4, #24]
 8009940:	4293      	cmp	r3, r2
 8009942:	db1c      	blt.n	800997e <_putc_r+0x76>
 8009944:	b2eb      	uxtb	r3, r5
 8009946:	2b0a      	cmp	r3, #10
 8009948:	d019      	beq.n	800997e <_putc_r+0x76>
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	701d      	strb	r5, [r3, #0]
 8009952:	b2ed      	uxtb	r5, r5
 8009954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009956:	07da      	lsls	r2, r3, #31
 8009958:	d405      	bmi.n	8009966 <_putc_r+0x5e>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	059b      	lsls	r3, r3, #22
 800995e:	d402      	bmi.n	8009966 <_putc_r+0x5e>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f7ff fcd6 	bl	8009312 <__retarget_lock_release_recursive>
 8009966:	4628      	mov	r0, r5
 8009968:	bd70      	pop	{r4, r5, r6, pc}
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <_putc_r+0x88>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d101      	bne.n	8009974 <_putc_r+0x6c>
 8009970:	68b4      	ldr	r4, [r6, #8]
 8009972:	e7d6      	b.n	8009922 <_putc_r+0x1a>
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <_putc_r+0x8c>)
 8009976:	429c      	cmp	r4, r3
 8009978:	bf08      	it	eq
 800997a:	68f4      	ldreq	r4, [r6, #12]
 800997c:	e7d1      	b.n	8009922 <_putc_r+0x1a>
 800997e:	4629      	mov	r1, r5
 8009980:	4622      	mov	r2, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f000 f84c 	bl	8009a20 <__swbuf_r>
 8009988:	4605      	mov	r5, r0
 800998a:	e7e3      	b.n	8009954 <_putc_r+0x4c>
 800998c:	08009f88 	.word	0x08009f88
 8009990:	08009fa8 	.word	0x08009fa8
 8009994:	08009f68 	.word	0x08009f68

08009998 <__sread>:
 8009998:	b510      	push	{r4, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a0:	f000 fa5a 	bl	8009e58 <_read_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	bfab      	itete	ge
 80099a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099aa:	89a3      	ldrhlt	r3, [r4, #12]
 80099ac:	181b      	addge	r3, r3, r0
 80099ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099b2:	bfac      	ite	ge
 80099b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099b6:	81a3      	strhlt	r3, [r4, #12]
 80099b8:	bd10      	pop	{r4, pc}

080099ba <__swrite>:
 80099ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099be:	461f      	mov	r7, r3
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	05db      	lsls	r3, r3, #23
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4616      	mov	r6, r2
 80099ca:	d505      	bpl.n	80099d8 <__swrite+0x1e>
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	2302      	movs	r3, #2
 80099d2:	2200      	movs	r2, #0
 80099d4:	f000 f9c8 	bl	8009d68 <_lseek_r>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	4632      	mov	r2, r6
 80099e6:	463b      	mov	r3, r7
 80099e8:	4628      	mov	r0, r5
 80099ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	f000 b869 	b.w	8009ac4 <_write_r>

080099f2 <__sseek>:
 80099f2:	b510      	push	{r4, lr}
 80099f4:	460c      	mov	r4, r1
 80099f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fa:	f000 f9b5 	bl	8009d68 <_lseek_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	bf15      	itete	ne
 8009a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a0e:	81a3      	strheq	r3, [r4, #12]
 8009a10:	bf18      	it	ne
 8009a12:	81a3      	strhne	r3, [r4, #12]
 8009a14:	bd10      	pop	{r4, pc}

08009a16 <__sclose>:
 8009a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1a:	f000 b8d3 	b.w	8009bc4 <_close_r>
	...

08009a20 <__swbuf_r>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	460e      	mov	r6, r1
 8009a24:	4614      	mov	r4, r2
 8009a26:	4605      	mov	r5, r0
 8009a28:	b118      	cbz	r0, 8009a32 <__swbuf_r+0x12>
 8009a2a:	6983      	ldr	r3, [r0, #24]
 8009a2c:	b90b      	cbnz	r3, 8009a32 <__swbuf_r+0x12>
 8009a2e:	f7ff fbd1 	bl	80091d4 <__sinit>
 8009a32:	4b21      	ldr	r3, [pc, #132]	; (8009ab8 <__swbuf_r+0x98>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	d12b      	bne.n	8009a90 <__swbuf_r+0x70>
 8009a38:	686c      	ldr	r4, [r5, #4]
 8009a3a:	69a3      	ldr	r3, [r4, #24]
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	071a      	lsls	r2, r3, #28
 8009a42:	d52f      	bpl.n	8009aa4 <__swbuf_r+0x84>
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	b36b      	cbz	r3, 8009aa4 <__swbuf_r+0x84>
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	1ac0      	subs	r0, r0, r3
 8009a4e:	6963      	ldr	r3, [r4, #20]
 8009a50:	b2f6      	uxtb	r6, r6
 8009a52:	4283      	cmp	r3, r0
 8009a54:	4637      	mov	r7, r6
 8009a56:	dc04      	bgt.n	8009a62 <__swbuf_r+0x42>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 f948 	bl	8009cf0 <_fflush_r>
 8009a60:	bb30      	cbnz	r0, 8009ab0 <__swbuf_r+0x90>
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	60a3      	str	r3, [r4, #8]
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	6022      	str	r2, [r4, #0]
 8009a6e:	701e      	strb	r6, [r3, #0]
 8009a70:	6963      	ldr	r3, [r4, #20]
 8009a72:	3001      	adds	r0, #1
 8009a74:	4283      	cmp	r3, r0
 8009a76:	d004      	beq.n	8009a82 <__swbuf_r+0x62>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	07db      	lsls	r3, r3, #31
 8009a7c:	d506      	bpl.n	8009a8c <__swbuf_r+0x6c>
 8009a7e:	2e0a      	cmp	r6, #10
 8009a80:	d104      	bne.n	8009a8c <__swbuf_r+0x6c>
 8009a82:	4621      	mov	r1, r4
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f933 	bl	8009cf0 <_fflush_r>
 8009a8a:	b988      	cbnz	r0, 8009ab0 <__swbuf_r+0x90>
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a90:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <__swbuf_r+0x9c>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	d101      	bne.n	8009a9a <__swbuf_r+0x7a>
 8009a96:	68ac      	ldr	r4, [r5, #8]
 8009a98:	e7cf      	b.n	8009a3a <__swbuf_r+0x1a>
 8009a9a:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <__swbuf_r+0xa0>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	bf08      	it	eq
 8009aa0:	68ec      	ldreq	r4, [r5, #12]
 8009aa2:	e7ca      	b.n	8009a3a <__swbuf_r+0x1a>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f81e 	bl	8009ae8 <__swsetup_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d0cb      	beq.n	8009a48 <__swbuf_r+0x28>
 8009ab0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ab4:	e7ea      	b.n	8009a8c <__swbuf_r+0x6c>
 8009ab6:	bf00      	nop
 8009ab8:	08009f88 	.word	0x08009f88
 8009abc:	08009fa8 	.word	0x08009fa8
 8009ac0:	08009f68 	.word	0x08009f68

08009ac4 <_write_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d07      	ldr	r5, [pc, #28]	; (8009ae4 <_write_r+0x20>)
 8009ac8:	4604      	mov	r4, r0
 8009aca:	4608      	mov	r0, r1
 8009acc:	4611      	mov	r1, r2
 8009ace:	2200      	movs	r2, #0
 8009ad0:	602a      	str	r2, [r5, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f7f7 fa83 	bl	8000fde <_write>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_write_r+0x1e>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_write_r+0x1e>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	200008f0 	.word	0x200008f0

08009ae8 <__swsetup_r>:
 8009ae8:	4b32      	ldr	r3, [pc, #200]	; (8009bb4 <__swsetup_r+0xcc>)
 8009aea:	b570      	push	{r4, r5, r6, lr}
 8009aec:	681d      	ldr	r5, [r3, #0]
 8009aee:	4606      	mov	r6, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	b125      	cbz	r5, 8009afe <__swsetup_r+0x16>
 8009af4:	69ab      	ldr	r3, [r5, #24]
 8009af6:	b913      	cbnz	r3, 8009afe <__swsetup_r+0x16>
 8009af8:	4628      	mov	r0, r5
 8009afa:	f7ff fb6b 	bl	80091d4 <__sinit>
 8009afe:	4b2e      	ldr	r3, [pc, #184]	; (8009bb8 <__swsetup_r+0xd0>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d10f      	bne.n	8009b24 <__swsetup_r+0x3c>
 8009b04:	686c      	ldr	r4, [r5, #4]
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b0c:	0719      	lsls	r1, r3, #28
 8009b0e:	d42c      	bmi.n	8009b6a <__swsetup_r+0x82>
 8009b10:	06dd      	lsls	r5, r3, #27
 8009b12:	d411      	bmi.n	8009b38 <__swsetup_r+0x50>
 8009b14:	2309      	movs	r3, #9
 8009b16:	6033      	str	r3, [r6, #0]
 8009b18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b22:	e03e      	b.n	8009ba2 <__swsetup_r+0xba>
 8009b24:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <__swsetup_r+0xd4>)
 8009b26:	429c      	cmp	r4, r3
 8009b28:	d101      	bne.n	8009b2e <__swsetup_r+0x46>
 8009b2a:	68ac      	ldr	r4, [r5, #8]
 8009b2c:	e7eb      	b.n	8009b06 <__swsetup_r+0x1e>
 8009b2e:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <__swsetup_r+0xd8>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	bf08      	it	eq
 8009b34:	68ec      	ldreq	r4, [r5, #12]
 8009b36:	e7e6      	b.n	8009b06 <__swsetup_r+0x1e>
 8009b38:	0758      	lsls	r0, r3, #29
 8009b3a:	d512      	bpl.n	8009b62 <__swsetup_r+0x7a>
 8009b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b3e:	b141      	cbz	r1, 8009b52 <__swsetup_r+0x6a>
 8009b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b44:	4299      	cmp	r1, r3
 8009b46:	d002      	beq.n	8009b4e <__swsetup_r+0x66>
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff f9cd 	bl	8008ee8 <_free_r>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	6363      	str	r3, [r4, #52]	; 0x34
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6063      	str	r3, [r4, #4]
 8009b5e:	6923      	ldr	r3, [r4, #16]
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f043 0308 	orr.w	r3, r3, #8
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	b94b      	cbnz	r3, 8009b82 <__swsetup_r+0x9a>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b78:	d003      	beq.n	8009b82 <__swsetup_r+0x9a>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f000 f92b 	bl	8009dd8 <__smakebuf_r>
 8009b82:	89a0      	ldrh	r0, [r4, #12]
 8009b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b88:	f010 0301 	ands.w	r3, r0, #1
 8009b8c:	d00a      	beq.n	8009ba4 <__swsetup_r+0xbc>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60a3      	str	r3, [r4, #8]
 8009b92:	6963      	ldr	r3, [r4, #20]
 8009b94:	425b      	negs	r3, r3
 8009b96:	61a3      	str	r3, [r4, #24]
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	b943      	cbnz	r3, 8009bae <__swsetup_r+0xc6>
 8009b9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ba0:	d1ba      	bne.n	8009b18 <__swsetup_r+0x30>
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	0781      	lsls	r1, r0, #30
 8009ba6:	bf58      	it	pl
 8009ba8:	6963      	ldrpl	r3, [r4, #20]
 8009baa:	60a3      	str	r3, [r4, #8]
 8009bac:	e7f4      	b.n	8009b98 <__swsetup_r+0xb0>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e7f7      	b.n	8009ba2 <__swsetup_r+0xba>
 8009bb2:	bf00      	nop
 8009bb4:	2000002c 	.word	0x2000002c
 8009bb8:	08009f88 	.word	0x08009f88
 8009bbc:	08009fa8 	.word	0x08009fa8
 8009bc0:	08009f68 	.word	0x08009f68

08009bc4 <_close_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d06      	ldr	r5, [pc, #24]	; (8009be0 <_close_r+0x1c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f7 fa21 	bl	8001016 <_close>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_close_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_close_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	200008f0 	.word	0x200008f0

08009be4 <__sflush_r>:
 8009be4:	898a      	ldrh	r2, [r1, #12]
 8009be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	4605      	mov	r5, r0
 8009bec:	0710      	lsls	r0, r2, #28
 8009bee:	460c      	mov	r4, r1
 8009bf0:	d458      	bmi.n	8009ca4 <__sflush_r+0xc0>
 8009bf2:	684b      	ldr	r3, [r1, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dc05      	bgt.n	8009c04 <__sflush_r+0x20>
 8009bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc02      	bgt.n	8009c04 <__sflush_r+0x20>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d0f9      	beq.n	8009bfe <__sflush_r+0x1a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c10:	682f      	ldr	r7, [r5, #0]
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	d032      	beq.n	8009c7c <__sflush_r+0x98>
 8009c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	075a      	lsls	r2, r3, #29
 8009c1c:	d505      	bpl.n	8009c2a <__sflush_r+0x46>
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	1ac0      	subs	r0, r0, r3
 8009c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c24:	b10b      	cbz	r3, 8009c2a <__sflush_r+0x46>
 8009c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c28:	1ac0      	subs	r0, r0, r3
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c30:	6a21      	ldr	r1, [r4, #32]
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b0      	blx	r6
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	d106      	bne.n	8009c4a <__sflush_r+0x66>
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	291d      	cmp	r1, #29
 8009c40:	d82c      	bhi.n	8009c9c <__sflush_r+0xb8>
 8009c42:	4a2a      	ldr	r2, [pc, #168]	; (8009cec <__sflush_r+0x108>)
 8009c44:	40ca      	lsrs	r2, r1
 8009c46:	07d6      	lsls	r6, r2, #31
 8009c48:	d528      	bpl.n	8009c9c <__sflush_r+0xb8>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	6062      	str	r2, [r4, #4]
 8009c4e:	04d9      	lsls	r1, r3, #19
 8009c50:	6922      	ldr	r2, [r4, #16]
 8009c52:	6022      	str	r2, [r4, #0]
 8009c54:	d504      	bpl.n	8009c60 <__sflush_r+0x7c>
 8009c56:	1c42      	adds	r2, r0, #1
 8009c58:	d101      	bne.n	8009c5e <__sflush_r+0x7a>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b903      	cbnz	r3, 8009c60 <__sflush_r+0x7c>
 8009c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c62:	602f      	str	r7, [r5, #0]
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d0ca      	beq.n	8009bfe <__sflush_r+0x1a>
 8009c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	d002      	beq.n	8009c76 <__sflush_r+0x92>
 8009c70:	4628      	mov	r0, r5
 8009c72:	f7ff f939 	bl	8008ee8 <_free_r>
 8009c76:	2000      	movs	r0, #0
 8009c78:	6360      	str	r0, [r4, #52]	; 0x34
 8009c7a:	e7c1      	b.n	8009c00 <__sflush_r+0x1c>
 8009c7c:	6a21      	ldr	r1, [r4, #32]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b0      	blx	r6
 8009c84:	1c41      	adds	r1, r0, #1
 8009c86:	d1c7      	bne.n	8009c18 <__sflush_r+0x34>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c4      	beq.n	8009c18 <__sflush_r+0x34>
 8009c8e:	2b1d      	cmp	r3, #29
 8009c90:	d001      	beq.n	8009c96 <__sflush_r+0xb2>
 8009c92:	2b16      	cmp	r3, #22
 8009c94:	d101      	bne.n	8009c9a <__sflush_r+0xb6>
 8009c96:	602f      	str	r7, [r5, #0]
 8009c98:	e7b1      	b.n	8009bfe <__sflush_r+0x1a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	e7ad      	b.n	8009c00 <__sflush_r+0x1c>
 8009ca4:	690f      	ldr	r7, [r1, #16]
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	d0a9      	beq.n	8009bfe <__sflush_r+0x1a>
 8009caa:	0793      	lsls	r3, r2, #30
 8009cac:	680e      	ldr	r6, [r1, #0]
 8009cae:	bf08      	it	eq
 8009cb0:	694b      	ldreq	r3, [r1, #20]
 8009cb2:	600f      	str	r7, [r1, #0]
 8009cb4:	bf18      	it	ne
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	eba6 0807 	sub.w	r8, r6, r7
 8009cbc:	608b      	str	r3, [r1, #8]
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	dd9c      	ble.n	8009bfe <__sflush_r+0x1a>
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cc8:	4643      	mov	r3, r8
 8009cca:	463a      	mov	r2, r7
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b0      	blx	r6
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	dc06      	bgt.n	8009ce2 <__sflush_r+0xfe>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce0:	e78e      	b.n	8009c00 <__sflush_r+0x1c>
 8009ce2:	4407      	add	r7, r0
 8009ce4:	eba8 0800 	sub.w	r8, r8, r0
 8009ce8:	e7e9      	b.n	8009cbe <__sflush_r+0xda>
 8009cea:	bf00      	nop
 8009cec:	20400001 	.word	0x20400001

08009cf0 <_fflush_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b913      	cbnz	r3, 8009d00 <_fflush_r+0x10>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	b118      	cbz	r0, 8009d0a <_fflush_r+0x1a>
 8009d02:	6983      	ldr	r3, [r0, #24]
 8009d04:	b90b      	cbnz	r3, 8009d0a <_fflush_r+0x1a>
 8009d06:	f7ff fa65 	bl	80091d4 <__sinit>
 8009d0a:	4b14      	ldr	r3, [pc, #80]	; (8009d5c <_fflush_r+0x6c>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d11b      	bne.n	8009d48 <_fflush_r+0x58>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ef      	beq.n	8009cfa <_fflush_r+0xa>
 8009d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d1c:	07d0      	lsls	r0, r2, #31
 8009d1e:	d404      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d20:	0599      	lsls	r1, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f7ff faf3 	bl	8009310 <__retarget_lock_acquire_recursive>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f7ff ff59 	bl	8009be4 <__sflush_r>
 8009d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d34:	07da      	lsls	r2, r3, #31
 8009d36:	4605      	mov	r5, r0
 8009d38:	d4e0      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	059b      	lsls	r3, r3, #22
 8009d3e:	d4dd      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d42:	f7ff fae6 	bl	8009312 <__retarget_lock_release_recursive>
 8009d46:	e7d9      	b.n	8009cfc <_fflush_r+0xc>
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <_fflush_r+0x70>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <_fflush_r+0x62>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7df      	b.n	8009d12 <_fflush_r+0x22>
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <_fflush_r+0x74>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7da      	b.n	8009d12 <_fflush_r+0x22>
 8009d5c:	08009f88 	.word	0x08009f88
 8009d60:	08009fa8 	.word	0x08009fa8
 8009d64:	08009f68 	.word	0x08009f68

08009d68 <_lseek_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d07      	ldr	r5, [pc, #28]	; (8009d88 <_lseek_r+0x20>)
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	4608      	mov	r0, r1
 8009d70:	4611      	mov	r1, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f7f7 f974 	bl	8001064 <_lseek>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_lseek_r+0x1e>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_lseek_r+0x1e>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	200008f0 	.word	0x200008f0

08009d8c <__swhatbuf_r>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	b096      	sub	sp, #88	; 0x58
 8009d98:	4614      	mov	r4, r2
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	da08      	bge.n	8009db0 <__swhatbuf_r+0x24>
 8009d9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	602a      	str	r2, [r5, #0]
 8009da6:	061a      	lsls	r2, r3, #24
 8009da8:	d410      	bmi.n	8009dcc <__swhatbuf_r+0x40>
 8009daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dae:	e00e      	b.n	8009dce <__swhatbuf_r+0x42>
 8009db0:	466a      	mov	r2, sp
 8009db2:	f000 f863 	bl	8009e7c <_fstat_r>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	dbf1      	blt.n	8009d9e <__swhatbuf_r+0x12>
 8009dba:	9a01      	ldr	r2, [sp, #4]
 8009dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009dc4:	425a      	negs	r2, r3
 8009dc6:	415a      	adcs	r2, r3
 8009dc8:	602a      	str	r2, [r5, #0]
 8009dca:	e7ee      	b.n	8009daa <__swhatbuf_r+0x1e>
 8009dcc:	2340      	movs	r3, #64	; 0x40
 8009dce:	2000      	movs	r0, #0
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	b016      	add	sp, #88	; 0x58
 8009dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009dd8 <__smakebuf_r>:
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ddc:	079d      	lsls	r5, r3, #30
 8009dde:	4606      	mov	r6, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	d507      	bpl.n	8009df4 <__smakebuf_r+0x1c>
 8009de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	6123      	str	r3, [r4, #16]
 8009dec:	2301      	movs	r3, #1
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	b002      	add	sp, #8
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	ab01      	add	r3, sp, #4
 8009df6:	466a      	mov	r2, sp
 8009df8:	f7ff ffc8 	bl	8009d8c <__swhatbuf_r>
 8009dfc:	9900      	ldr	r1, [sp, #0]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff f8dd 	bl	8008fc0 <_malloc_r>
 8009e06:	b948      	cbnz	r0, 8009e1c <__smakebuf_r+0x44>
 8009e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0c:	059a      	lsls	r2, r3, #22
 8009e0e:	d4ef      	bmi.n	8009df0 <__smakebuf_r+0x18>
 8009e10:	f023 0303 	bic.w	r3, r3, #3
 8009e14:	f043 0302 	orr.w	r3, r3, #2
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	e7e3      	b.n	8009de4 <__smakebuf_r+0xc>
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <__smakebuf_r+0x7c>)
 8009e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e28:	81a3      	strh	r3, [r4, #12]
 8009e2a:	9b00      	ldr	r3, [sp, #0]
 8009e2c:	6163      	str	r3, [r4, #20]
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	6120      	str	r0, [r4, #16]
 8009e32:	b15b      	cbz	r3, 8009e4c <__smakebuf_r+0x74>
 8009e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 f831 	bl	8009ea0 <_isatty_r>
 8009e3e:	b128      	cbz	r0, 8009e4c <__smakebuf_r+0x74>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	89a0      	ldrh	r0, [r4, #12]
 8009e4e:	4305      	orrs	r5, r0
 8009e50:	81a5      	strh	r5, [r4, #12]
 8009e52:	e7cd      	b.n	8009df0 <__smakebuf_r+0x18>
 8009e54:	0800916d 	.word	0x0800916d

08009e58 <_read_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	; (8009e78 <_read_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7f7 f89c 	bl	8000fa4 <_read>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_read_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_read_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	200008f0 	.word	0x200008f0

08009e7c <_fstat_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	; (8009e9c <_fstat_r+0x20>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	f7f7 f8d0 	bl	800102e <_fstat>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	d102      	bne.n	8009e98 <_fstat_r+0x1c>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b103      	cbz	r3, 8009e98 <_fstat_r+0x1c>
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	bd38      	pop	{r3, r4, r5, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200008f0 	.word	0x200008f0

08009ea0 <_isatty_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d06      	ldr	r5, [pc, #24]	; (8009ebc <_isatty_r+0x1c>)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	f7f7 f8cf 	bl	800104e <_isatty>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_isatty_r+0x1a>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_isatty_r+0x1a>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	200008f0 	.word	0x200008f0

08009ec0 <_init>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	bf00      	nop
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr

08009ecc <_fini>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr
